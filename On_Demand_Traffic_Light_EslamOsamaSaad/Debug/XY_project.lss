
XY_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001326  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000a  00800060  00800060  0000139a  2**0
                  ALLOC
  2 .stab         00002400  00000000  00000000  0000139c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d06  00000000  00000000  0000379c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a9 02 	jmp	0x552	; 0x552 <__vector_1>
       8:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__vector_2>
       c:	0c 94 03 03 	jmp	0x606	; 0x606 <__vector_3>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 36       	cpi	r26, 0x6A	; 106
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 88 09 	call	0x1310	; 0x1310 <main>
      74:	0c 94 91 09 	jmp	0x1322	; 0x1322 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <MTIMER2_TIMER2_void_Init>:

#include"MTIMER2_private.h"
#include"MTIMER2_config.h"

void MTIMER2_TIMER2_void_Init()
{
      7c:	df 93       	push	r29
      7e:	cf 93       	push	r28
      80:	cd b7       	in	r28, 0x3d	; 61
      82:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MTIMER2_TIMSK , TOIE2);
	/*===============================================================*/

#elif TIMER2_MODE == TIMER2_CTC_MODE
	/*Select CTC mode (Clear on compare match)*/
	SET_BIT(MTIMER2_TCCR2 , WGM21);
      84:	a5 e4       	ldi	r26, 0x45	; 69
      86:	b0 e0       	ldi	r27, 0x00	; 0
      88:	e5 e4       	ldi	r30, 0x45	; 69
      8a:	f0 e0       	ldi	r31, 0x00	; 0
      8c:	80 81       	ld	r24, Z
      8e:	88 60       	ori	r24, 0x08	; 8
      90:	8c 93       	st	X, r24
	CLEAR_BIT(MTIMER2_TCCR2 , WGM20);
      92:	a5 e4       	ldi	r26, 0x45	; 69
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	e5 e4       	ldi	r30, 0x45	; 69
      98:	f0 e0       	ldi	r31, 0x00	; 0
      9a:	80 81       	ld	r24, Z
      9c:	8f 7b       	andi	r24, 0xBF	; 191
      9e:	8c 93       	st	X, r24
	/*Enable PIE (peripheral interrupt enable) CTC interrupt*/
	//SET_BIT(MTIMER2_TIMSK , OCIE2);
	/*===============================================================*/
	/*Select OC2 pin mode*/
	#if OC2_MODE == OC2_DISCONNECTED
		CLEAR_BIT(MTIMER2_TCCR2 , COM20);
      a0:	a5 e4       	ldi	r26, 0x45	; 69
      a2:	b0 e0       	ldi	r27, 0x00	; 0
      a4:	e5 e4       	ldi	r30, 0x45	; 69
      a6:	f0 e0       	ldi	r31, 0x00	; 0
      a8:	80 81       	ld	r24, Z
      aa:	8f 7e       	andi	r24, 0xEF	; 239
      ac:	8c 93       	st	X, r24
		CLEAR_BIT(MTIMER2_TCCR2 , COM21);
      ae:	a5 e4       	ldi	r26, 0x45	; 69
      b0:	b0 e0       	ldi	r27, 0x00	; 0
      b2:	e5 e4       	ldi	r30, 0x45	; 69
      b4:	f0 e0       	ldi	r31, 0x00	; 0
      b6:	80 81       	ld	r24, Z
      b8:	8f 7d       	andi	r24, 0xDF	; 223
      ba:	8c 93       	st	X, r24
	#error "your TIMER2 mode is not valid "

#endif

	/*prescaler division factor setting*/
	MTIMER2_TCCR2 &= PRESCALER_MASK;
      bc:	a5 e4       	ldi	r26, 0x45	; 69
      be:	b0 e0       	ldi	r27, 0x00	; 0
      c0:	e5 e4       	ldi	r30, 0x45	; 69
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	80 81       	ld	r24, Z
      c6:	88 7f       	andi	r24, 0xF8	; 248
      c8:	8c 93       	st	X, r24
	MTIMER2_TCCR2 |= TIMER2_PRESCALER;
      ca:	a5 e4       	ldi	r26, 0x45	; 69
      cc:	b0 e0       	ldi	r27, 0x00	; 0
      ce:	e5 e4       	ldi	r30, 0x45	; 69
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	80 81       	ld	r24, Z
      d4:	82 60       	ori	r24, 0x02	; 2
      d6:	8c 93       	st	X, r24

}
      d8:	cf 91       	pop	r28
      da:	df 91       	pop	r29
      dc:	08 95       	ret

000000de <MTIMER2_void_Set_Preload_or_OCR2_Value>:

void MTIMER2_void_Set_Preload_or_OCR2_Value(u8 Copy_u8value)
{
      de:	df 93       	push	r29
      e0:	cf 93       	push	r28
      e2:	0f 92       	push	r0
      e4:	cd b7       	in	r28, 0x3d	; 61
      e6:	de b7       	in	r29, 0x3e	; 62
      e8:	89 83       	std	Y+1, r24	; 0x01
#if TIMER2_MODE == TIMER2_OVF_MODE
	MTIMER2_TCNT2 = Copy_u8value;

#elif TIMER2_MODE == TIMER2_CTC_MODE
	MTIMER2_OCR2 = Copy_u8value;
      ea:	e3 e4       	ldi	r30, 0x43	; 67
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	89 81       	ldd	r24, Y+1	; 0x01
      f0:	80 83       	st	Z, r24
#elif TIMER2_MODE == TIMER2_FAST_PWM_MODE
	MTIMER2_OCR2 = Copy_u8value;


#endif
}
      f2:	0f 90       	pop	r0
      f4:	cf 91       	pop	r28
      f6:	df 91       	pop	r29
      f8:	08 95       	ret

000000fa <MTIMER2_void_check_OVF_or_CTC_flag>:

void MTIMER2_void_check_OVF_or_CTC_flag()
{
      fa:	df 93       	push	r29
      fc:	cf 93       	push	r28
      fe:	cd b7       	in	r28, 0x3d	; 61
     100:	de b7       	in	r29, 0x3e	; 62
#if TIMER2_MODE == TIMER2_OVF_MODE
	while(GET_BIT(MTIMER2_TIFR , TOV2) == 0);

#elif TIMER2_MODE == TIMER2_CTC_MODE
	while(GET_BIT(MTIMER2_TIFR , OCF2) == 0);
     102:	e8 e5       	ldi	r30, 0x58	; 88
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	80 81       	ld	r24, Z
     108:	88 23       	and	r24, r24
     10a:	dc f7       	brge	.-10     	; 0x102 <MTIMER2_void_check_OVF_or_CTC_flag+0x8>

#endif
}
     10c:	cf 91       	pop	r28
     10e:	df 91       	pop	r29
     110:	08 95       	ret

00000112 <MTIMER2_void_clear_TOV2_or_OCF2>:

void MTIMER2_void_clear_TOV2_or_OCF2()
{
     112:	df 93       	push	r29
     114:	cf 93       	push	r28
     116:	cd b7       	in	r28, 0x3d	; 61
     118:	de b7       	in	r29, 0x3e	; 62
#if TIMER2_MODE == TIMER2_OVF_MODE
	SET_BIT(MTIMER2_TIFR , TOV2);

#elif TIMER2_MODE == TIMER2_CTC_MODE
	SET_BIT(MTIMER2_TIFR , OCF2);
     11a:	a8 e5       	ldi	r26, 0x58	; 88
     11c:	b0 e0       	ldi	r27, 0x00	; 0
     11e:	e8 e5       	ldi	r30, 0x58	; 88
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	80 81       	ld	r24, Z
     124:	80 68       	ori	r24, 0x80	; 128
     126:	8c 93       	st	X, r24

#endif
}
     128:	cf 91       	pop	r28
     12a:	df 91       	pop	r29
     12c:	08 95       	ret

0000012e <MTIMER2_void_start_counting>:

void MTIMER2_void_start_counting()
{
     12e:	df 93       	push	r29
     130:	cf 93       	push	r28
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
	/*prescaler division factor setting*/
	MTIMER2_TCCR2 &= PRESCALER_MASK;
     136:	a5 e4       	ldi	r26, 0x45	; 69
     138:	b0 e0       	ldi	r27, 0x00	; 0
     13a:	e5 e4       	ldi	r30, 0x45	; 69
     13c:	f0 e0       	ldi	r31, 0x00	; 0
     13e:	80 81       	ld	r24, Z
     140:	88 7f       	andi	r24, 0xF8	; 248
     142:	8c 93       	st	X, r24
	MTIMER2_TCCR2 |= TIMER2_PRESCALER;
     144:	a5 e4       	ldi	r26, 0x45	; 69
     146:	b0 e0       	ldi	r27, 0x00	; 0
     148:	e5 e4       	ldi	r30, 0x45	; 69
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	80 81       	ld	r24, Z
     14e:	82 60       	ori	r24, 0x02	; 2
     150:	8c 93       	st	X, r24
}
     152:	cf 91       	pop	r28
     154:	df 91       	pop	r29
     156:	08 95       	ret

00000158 <MTIMER2_void_stop_counting>:

void MTIMER2_void_stop_counting()
{
     158:	df 93       	push	r29
     15a:	cf 93       	push	r28
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
	//Timer stop
	MTIMER2_TCCR2 &= PRESCALER_MASK;
     160:	a5 e4       	ldi	r26, 0x45	; 69
     162:	b0 e0       	ldi	r27, 0x00	; 0
     164:	e5 e4       	ldi	r30, 0x45	; 69
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	80 81       	ld	r24, Z
     16a:	88 7f       	andi	r24, 0xF8	; 248
     16c:	8c 93       	st	X, r24
}
     16e:	cf 91       	pop	r28
     170:	df 91       	pop	r29
     172:	08 95       	ret

00000174 <MTIMER2_void_delay>:

void MTIMER2_void_delay()
{
     174:	df 93       	push	r29
     176:	cf 93       	push	r28
     178:	cd b7       	in	r28, 0x3d	; 61
     17a:	de b7       	in	r29, 0x3e	; 62
#if TIMER2_MODE == TIMER2_OVF_MODE
	MTIMER2_void_Set_Preload_or_OCR2_Value(TIMER2_PRESCALER);

#elif TIMER2_MODE == TIMER2_CTC_MODE
	MTIMER2_void_Set_Preload_or_OCR2_Value(TIMER2_OCR2_VALUE);
     17c:	89 ef       	ldi	r24, 0xF9	; 249
     17e:	0e 94 6f 00 	call	0xde	; 0xde <MTIMER2_void_Set_Preload_or_OCR2_Value>
#endif
	MTIMER2_void_start_counting();
     182:	0e 94 97 00 	call	0x12e	; 0x12e <MTIMER2_void_start_counting>

	//busy waiting
	MTIMER2_void_check_OVF_or_CTC_flag();
     186:	0e 94 7d 00 	call	0xfa	; 0xfa <MTIMER2_void_check_OVF_or_CTC_flag>

	MTIMER2_void_clear_TOV2_or_OCF2();
     18a:	0e 94 89 00 	call	0x112	; 0x112 <MTIMER2_void_clear_TOV2_or_OCF2>

	MTIMER2_void_stop_counting();
     18e:	0e 94 ac 00 	call	0x158	; 0x158 <MTIMER2_void_stop_counting>
}
     192:	cf 91       	pop	r28
     194:	df 91       	pop	r29
     196:	08 95       	ret

00000198 <MTIMER_TIMER0_void_Init>:

#include"MTIMER_private.h"
#include"MTIMER_config.h"

void MTIMER_TIMER0_void_Init()
{
     198:	df 93       	push	r29
     19a:	cf 93       	push	r28
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MTIMER_TIMSK , TOIE0);
	/*===============================================================*/

#elif TIMER0_MODE == TIMER0_CTC_MODE
	/*Select CTC mode (Clear on compare match)*/
	SET_BIT(MTIMER_TCCR0 , WGM01);
     1a0:	a3 e5       	ldi	r26, 0x53	; 83
     1a2:	b0 e0       	ldi	r27, 0x00	; 0
     1a4:	e3 e5       	ldi	r30, 0x53	; 83
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	88 60       	ori	r24, 0x08	; 8
     1ac:	8c 93       	st	X, r24
	CLEAR_BIT(MTIMER_TCCR0 , WGM00);
     1ae:	a3 e5       	ldi	r26, 0x53	; 83
     1b0:	b0 e0       	ldi	r27, 0x00	; 0
     1b2:	e3 e5       	ldi	r30, 0x53	; 83
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	8f 7b       	andi	r24, 0xBF	; 191
     1ba:	8c 93       	st	X, r24
	/*Enable PIE (peripheral interrupt enable) CTC interrupt*/
	//SET_BIT(MTIMER_TIMSK , OCIE0);
	/*===============================================================*/
	/*Select OC0 pin mode*/
	#if OC0_MODE == OC0_DISCONNECTED
		CLEAR_BIT(MTIMER_TCCR0 , COM00);
     1bc:	a3 e5       	ldi	r26, 0x53	; 83
     1be:	b0 e0       	ldi	r27, 0x00	; 0
     1c0:	e3 e5       	ldi	r30, 0x53	; 83
     1c2:	f0 e0       	ldi	r31, 0x00	; 0
     1c4:	80 81       	ld	r24, Z
     1c6:	8f 7e       	andi	r24, 0xEF	; 239
     1c8:	8c 93       	st	X, r24
		CLEAR_BIT(MTIMER_TCCR0 , COM01);
     1ca:	a3 e5       	ldi	r26, 0x53	; 83
     1cc:	b0 e0       	ldi	r27, 0x00	; 0
     1ce:	e3 e5       	ldi	r30, 0x53	; 83
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	80 81       	ld	r24, Z
     1d4:	8f 7d       	andi	r24, 0xDF	; 223
     1d6:	8c 93       	st	X, r24
	#error "your TIMER0 mode is not valid "

#endif

	/*prescaler division factor setting*/
	MTIMER_TCCR0 &= PRESCALER_MASK;
     1d8:	a3 e5       	ldi	r26, 0x53	; 83
     1da:	b0 e0       	ldi	r27, 0x00	; 0
     1dc:	e3 e5       	ldi	r30, 0x53	; 83
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	80 81       	ld	r24, Z
     1e2:	88 7f       	andi	r24, 0xF8	; 248
     1e4:	8c 93       	st	X, r24
	MTIMER_TCCR0 |= TIMER_PRESCALER;
     1e6:	a3 e5       	ldi	r26, 0x53	; 83
     1e8:	b0 e0       	ldi	r27, 0x00	; 0
     1ea:	e3 e5       	ldi	r30, 0x53	; 83
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	80 81       	ld	r24, Z
     1f0:	82 60       	ori	r24, 0x02	; 2
     1f2:	8c 93       	st	X, r24

}
     1f4:	cf 91       	pop	r28
     1f6:	df 91       	pop	r29
     1f8:	08 95       	ret

000001fa <MTIMER_void_Set_Preload_or_OCR0_Value>:

void MTIMER_void_Set_Preload_or_OCR0_Value(u8 Copy_u8value)
{
     1fa:	df 93       	push	r29
     1fc:	cf 93       	push	r28
     1fe:	0f 92       	push	r0
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62
     204:	89 83       	std	Y+1, r24	; 0x01
#if TIMER0_MODE == TIMER0_OVF_MODE
	MTIMER_TCNT0 = Copy_u8value;

#elif TIMER0_MODE == TIMER0_CTC_MODE
	MTIMER_OCR0 = Copy_u8value;
     206:	ec e5       	ldi	r30, 0x5C	; 92
     208:	f0 e0       	ldi	r31, 0x00	; 0
     20a:	89 81       	ldd	r24, Y+1	; 0x01
     20c:	80 83       	st	Z, r24

#elif TIMER0_MODE == TIMER0_FAST_PWM_MODE
	MTIMER_OCR0 = Copy_u8value;

#endif
}
     20e:	0f 90       	pop	r0
     210:	cf 91       	pop	r28
     212:	df 91       	pop	r29
     214:	08 95       	ret

00000216 <MTIMER_void_check_OVF_or_CTC_flag>:

void MTIMER_void_check_OVF_or_CTC_flag()
{
     216:	df 93       	push	r29
     218:	cf 93       	push	r28
     21a:	cd b7       	in	r28, 0x3d	; 61
     21c:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_MODE == TIMER0_OVF_MODE
	while(GET_BIT(MTIMER_TIFR , TOV0) == 0);

#elif TIMER0_MODE == TIMER0_CTC_MODE
	while(GET_BIT(MTIMER_TIFR , OCF0) == 0);
     21e:	e8 e5       	ldi	r30, 0x58	; 88
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	80 81       	ld	r24, Z
     224:	86 95       	lsr	r24
     226:	88 2f       	mov	r24, r24
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	81 70       	andi	r24, 0x01	; 1
     22c:	90 70       	andi	r25, 0x00	; 0
     22e:	00 97       	sbiw	r24, 0x00	; 0
     230:	b1 f3       	breq	.-20     	; 0x21e <MTIMER_void_check_OVF_or_CTC_flag+0x8>

#endif
}
     232:	cf 91       	pop	r28
     234:	df 91       	pop	r29
     236:	08 95       	ret

00000238 <MTIMER_void_clear_TOV0_or_OCF0>:

void MTIMER_void_clear_TOV0_or_OCF0()
{
     238:	df 93       	push	r29
     23a:	cf 93       	push	r28
     23c:	cd b7       	in	r28, 0x3d	; 61
     23e:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_MODE == TIMER0_OVF_MODE
	SET_BIT(MTIMER_TIFR , TOV0);

#elif TIMER0_MODE == TIMER0_CTC_MODE
	SET_BIT(MTIMER_TIFR , OCF0);
     240:	a8 e5       	ldi	r26, 0x58	; 88
     242:	b0 e0       	ldi	r27, 0x00	; 0
     244:	e8 e5       	ldi	r30, 0x58	; 88
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	82 60       	ori	r24, 0x02	; 2
     24c:	8c 93       	st	X, r24

#endif
}
     24e:	cf 91       	pop	r28
     250:	df 91       	pop	r29
     252:	08 95       	ret

00000254 <MTIMER_void_start_counting>:

void MTIMER_void_start_counting()
{
     254:	df 93       	push	r29
     256:	cf 93       	push	r28
     258:	cd b7       	in	r28, 0x3d	; 61
     25a:	de b7       	in	r29, 0x3e	; 62
	/*prescaler division factor setting*/
	MTIMER_TCCR0 &= PRESCALER_MASK;
     25c:	a3 e5       	ldi	r26, 0x53	; 83
     25e:	b0 e0       	ldi	r27, 0x00	; 0
     260:	e3 e5       	ldi	r30, 0x53	; 83
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	80 81       	ld	r24, Z
     266:	88 7f       	andi	r24, 0xF8	; 248
     268:	8c 93       	st	X, r24
	MTIMER_TCCR0 |= TIMER_PRESCALER;
     26a:	a3 e5       	ldi	r26, 0x53	; 83
     26c:	b0 e0       	ldi	r27, 0x00	; 0
     26e:	e3 e5       	ldi	r30, 0x53	; 83
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	80 81       	ld	r24, Z
     274:	82 60       	ori	r24, 0x02	; 2
     276:	8c 93       	st	X, r24
}
     278:	cf 91       	pop	r28
     27a:	df 91       	pop	r29
     27c:	08 95       	ret

0000027e <MTIMER_void_stop_counting>:

void MTIMER_void_stop_counting()
{
     27e:	df 93       	push	r29
     280:	cf 93       	push	r28
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
	//Timer stop
	MTIMER_TCCR0 &= PRESCALER_MASK;
     286:	a3 e5       	ldi	r26, 0x53	; 83
     288:	b0 e0       	ldi	r27, 0x00	; 0
     28a:	e3 e5       	ldi	r30, 0x53	; 83
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	80 81       	ld	r24, Z
     290:	88 7f       	andi	r24, 0xF8	; 248
     292:	8c 93       	st	X, r24
}
     294:	cf 91       	pop	r28
     296:	df 91       	pop	r29
     298:	08 95       	ret

0000029a <MTIMER_void_delay>:

void MTIMER_void_delay()
{
     29a:	df 93       	push	r29
     29c:	cf 93       	push	r28
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_MODE == TIMER0_OVF_MODE
	MTIMER_void_Set_Preload_or_OCR0_Value(TIMER_PRESCALER);

#elif TIMER0_MODE == TIMER0_CTC_MODE
	MTIMER_void_Set_Preload_or_OCR0_Value(TIMER0_OCR0_VALUE);
     2a2:	89 ef       	ldi	r24, 0xF9	; 249
     2a4:	0e 94 fd 00 	call	0x1fa	; 0x1fa <MTIMER_void_Set_Preload_or_OCR0_Value>
#endif
	MTIMER_void_start_counting();
     2a8:	0e 94 2a 01 	call	0x254	; 0x254 <MTIMER_void_start_counting>

	//busy waiting
	MTIMER_void_check_OVF_or_CTC_flag();
     2ac:	0e 94 0b 01 	call	0x216	; 0x216 <MTIMER_void_check_OVF_or_CTC_flag>

	MTIMER_void_clear_TOV0_or_OCF0();
     2b0:	0e 94 1c 01 	call	0x238	; 0x238 <MTIMER_void_clear_TOV0_or_OCF0>

	MTIMER_void_stop_counting();
     2b4:	0e 94 3f 01 	call	0x27e	; 0x27e <MTIMER_void_stop_counting>
}
     2b8:	cf 91       	pop	r28
     2ba:	df 91       	pop	r29
     2bc:	08 95       	ret

000002be <MGIE_void_enable>:
#include"../../LIB/LBIT_MATH.h"

#include"MGIE_private.h"

void MGIE_void_enable(void)
{
     2be:	df 93       	push	r29
     2c0:	cf 93       	push	r28
     2c2:	cd b7       	in	r28, 0x3d	; 61
     2c4:	de b7       	in	r29, 0x3e	; 62
	/*Enable I_BIT (GIE) bit in SREG*/
	SET_BIT(SREG , I_BIT);
     2c6:	af e5       	ldi	r26, 0x5F	; 95
     2c8:	b0 e0       	ldi	r27, 0x00	; 0
     2ca:	ef e5       	ldi	r30, 0x5F	; 95
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	80 81       	ld	r24, Z
     2d0:	80 68       	ori	r24, 0x80	; 128
     2d2:	8c 93       	st	X, r24
}
     2d4:	cf 91       	pop	r28
     2d6:	df 91       	pop	r29
     2d8:	08 95       	ret

000002da <MGIE_void_disable>:

void MGIE_void_disable(void)
{
     2da:	df 93       	push	r29
     2dc:	cf 93       	push	r28
     2de:	cd b7       	in	r28, 0x3d	; 61
     2e0:	de b7       	in	r29, 0x3e	; 62
	/*disable I_BIT (GIE) bit in SREG*/
		CLEAR_BIT(SREG , I_BIT);
     2e2:	af e5       	ldi	r26, 0x5F	; 95
     2e4:	b0 e0       	ldi	r27, 0x00	; 0
     2e6:	ef e5       	ldi	r30, 0x5F	; 95
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	80 81       	ld	r24, Z
     2ec:	8f 77       	andi	r24, 0x7F	; 127
     2ee:	8c 93       	st	X, r24
}
     2f0:	cf 91       	pop	r28
     2f2:	df 91       	pop	r29
     2f4:	08 95       	ret

000002f6 <MEXTI_void_enable>:
void (*ptr_f0) (void); //global varIAble which is pointer to the function in INT0
void (*ptr_f1) (void); //global varIAble which is pointer to the function in INT1
void (*ptr_f2) (void); //global varIAble which is pointer to the function in INT2

void MEXTI_void_enable(u8 INT)
{
     2f6:	df 93       	push	r29
     2f8:	cf 93       	push	r28
     2fa:	0f 92       	push	r0
     2fc:	cd b7       	in	r28, 0x3d	; 61
     2fe:	de b7       	in	r29, 0x3e	; 62
     300:	89 83       	std	Y+1, r24	; 0x01
	/*Enable PIE (peripheral interrupt enable)*/
	SET_BIT(EXTI_GICR , INT);
     302:	ab e5       	ldi	r26, 0x5B	; 91
     304:	b0 e0       	ldi	r27, 0x00	; 0
     306:	eb e5       	ldi	r30, 0x5B	; 91
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	80 81       	ld	r24, Z
     30c:	48 2f       	mov	r20, r24
     30e:	89 81       	ldd	r24, Y+1	; 0x01
     310:	28 2f       	mov	r18, r24
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	02 2e       	mov	r0, r18
     31a:	02 c0       	rjmp	.+4      	; 0x320 <MEXTI_void_enable+0x2a>
     31c:	88 0f       	add	r24, r24
     31e:	99 1f       	adc	r25, r25
     320:	0a 94       	dec	r0
     322:	e2 f7       	brpl	.-8      	; 0x31c <MEXTI_void_enable+0x26>
     324:	84 2b       	or	r24, r20
     326:	8c 93       	st	X, r24
}
     328:	0f 90       	pop	r0
     32a:	cf 91       	pop	r28
     32c:	df 91       	pop	r29
     32e:	08 95       	ret

00000330 <MEXTI_void_disable>:

void MEXTI_void_disable(u8 INT)
{
     330:	df 93       	push	r29
     332:	cf 93       	push	r28
     334:	0f 92       	push	r0
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
     33a:	89 83       	std	Y+1, r24	; 0x01
	/* -disable PIE (peripheral interrupt enable)*/
	CLEAR_BIT(EXTI_GICR , INT);
     33c:	ab e5       	ldi	r26, 0x5B	; 91
     33e:	b0 e0       	ldi	r27, 0x00	; 0
     340:	eb e5       	ldi	r30, 0x5B	; 91
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	80 81       	ld	r24, Z
     346:	48 2f       	mov	r20, r24
     348:	89 81       	ldd	r24, Y+1	; 0x01
     34a:	28 2f       	mov	r18, r24
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	02 2e       	mov	r0, r18
     354:	02 c0       	rjmp	.+4      	; 0x35a <MEXTI_void_disable+0x2a>
     356:	88 0f       	add	r24, r24
     358:	99 1f       	adc	r25, r25
     35a:	0a 94       	dec	r0
     35c:	e2 f7       	brpl	.-8      	; 0x356 <MEXTI_void_disable+0x26>
     35e:	80 95       	com	r24
     360:	84 23       	and	r24, r20
     362:	8c 93       	st	X, r24
}
     364:	0f 90       	pop	r0
     366:	cf 91       	pop	r28
     368:	df 91       	pop	r29
     36a:	08 95       	ret

0000036c <MEXTI_void_intialization>:


void MEXTI_void_intialization(u8 INT , u8 Mode)
{
     36c:	df 93       	push	r29
     36e:	cf 93       	push	r28
     370:	00 d0       	rcall	.+0      	; 0x372 <MEXTI_void_intialization+0x6>
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	89 83       	std	Y+1, r24	; 0x01
     378:	6a 83       	std	Y+2, r22	; 0x02

	/*Set mode*/
	if(INT == INT0)
     37a:	89 81       	ldd	r24, Y+1	; 0x01
     37c:	86 30       	cpi	r24, 0x06	; 6
     37e:	09 f0       	breq	.+2      	; 0x382 <MEXTI_void_intialization+0x16>
     380:	49 c0       	rjmp	.+146    	; 0x414 <MEXTI_void_intialization+0xa8>
	{
		if(Mode == RISING_EDGE)// ISC01 = 1 & ISC00 = 1
     382:	8a 81       	ldd	r24, Y+2	; 0x02
     384:	81 30       	cpi	r24, 0x01	; 1
     386:	79 f4       	brne	.+30     	; 0x3a6 <MEXTI_void_intialization+0x3a>
		{
			SET_BIT(EXTI_MCUCR , ISC00);
     388:	a5 e5       	ldi	r26, 0x55	; 85
     38a:	b0 e0       	ldi	r27, 0x00	; 0
     38c:	e5 e5       	ldi	r30, 0x55	; 85
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	80 81       	ld	r24, Z
     392:	81 60       	ori	r24, 0x01	; 1
     394:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR , ISC01);
     396:	a5 e5       	ldi	r26, 0x55	; 85
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	e5 e5       	ldi	r30, 0x55	; 85
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	80 81       	ld	r24, Z
     3a0:	82 60       	ori	r24, 0x02	; 2
     3a2:	8c 93       	st	X, r24
     3a4:	9b c0       	rjmp	.+310    	; 0x4dc <MEXTI_void_intialization+0x170>
		}
		else if(Mode == FALLING_EDGE)// ISC01 = 1 & ISC00 = 0
     3a6:	8a 81       	ldd	r24, Y+2	; 0x02
     3a8:	82 30       	cpi	r24, 0x02	; 2
     3aa:	79 f4       	brne	.+30     	; 0x3ca <MEXTI_void_intialization+0x5e>
		{
			CLEAR_BIT(EXTI_MCUCR , ISC00);
     3ac:	a5 e5       	ldi	r26, 0x55	; 85
     3ae:	b0 e0       	ldi	r27, 0x00	; 0
     3b0:	e5 e5       	ldi	r30, 0x55	; 85
     3b2:	f0 e0       	ldi	r31, 0x00	; 0
     3b4:	80 81       	ld	r24, Z
     3b6:	8e 7f       	andi	r24, 0xFE	; 254
     3b8:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR , ISC01);
     3ba:	a5 e5       	ldi	r26, 0x55	; 85
     3bc:	b0 e0       	ldi	r27, 0x00	; 0
     3be:	e5 e5       	ldi	r30, 0x55	; 85
     3c0:	f0 e0       	ldi	r31, 0x00	; 0
     3c2:	80 81       	ld	r24, Z
     3c4:	82 60       	ori	r24, 0x02	; 2
     3c6:	8c 93       	st	X, r24
     3c8:	89 c0       	rjmp	.+274    	; 0x4dc <MEXTI_void_intialization+0x170>
		}
		else if(Mode == LOW_LEVEL)// ISC01 = 0 & ISC00 = 0
     3ca:	8a 81       	ldd	r24, Y+2	; 0x02
     3cc:	84 30       	cpi	r24, 0x04	; 4
     3ce:	79 f4       	brne	.+30     	; 0x3ee <MEXTI_void_intialization+0x82>
		{
			CLEAR_BIT(EXTI_MCUCR , ISC00);
     3d0:	a5 e5       	ldi	r26, 0x55	; 85
     3d2:	b0 e0       	ldi	r27, 0x00	; 0
     3d4:	e5 e5       	ldi	r30, 0x55	; 85
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	8e 7f       	andi	r24, 0xFE	; 254
     3dc:	8c 93       	st	X, r24
			CLEAR_BIT(EXTI_MCUCR , ISC01);
     3de:	a5 e5       	ldi	r26, 0x55	; 85
     3e0:	b0 e0       	ldi	r27, 0x00	; 0
     3e2:	e5 e5       	ldi	r30, 0x55	; 85
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	80 81       	ld	r24, Z
     3e8:	8d 7f       	andi	r24, 0xFD	; 253
     3ea:	8c 93       	st	X, r24
     3ec:	77 c0       	rjmp	.+238    	; 0x4dc <MEXTI_void_intialization+0x170>
		}
		else if(Mode == ANY_CHANGE)// ISC01 = 0 & ISC00 =  1
     3ee:	8a 81       	ldd	r24, Y+2	; 0x02
     3f0:	83 30       	cpi	r24, 0x03	; 3
     3f2:	09 f0       	breq	.+2      	; 0x3f6 <MEXTI_void_intialization+0x8a>
     3f4:	73 c0       	rjmp	.+230    	; 0x4dc <MEXTI_void_intialization+0x170>
		{
			SET_BIT(EXTI_MCUCR , ISC00);
     3f6:	a5 e5       	ldi	r26, 0x55	; 85
     3f8:	b0 e0       	ldi	r27, 0x00	; 0
     3fa:	e5 e5       	ldi	r30, 0x55	; 85
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	80 81       	ld	r24, Z
     400:	81 60       	ori	r24, 0x01	; 1
     402:	8c 93       	st	X, r24
			CLEAR_BIT(EXTI_MCUCR , ISC00);
     404:	a5 e5       	ldi	r26, 0x55	; 85
     406:	b0 e0       	ldi	r27, 0x00	; 0
     408:	e5 e5       	ldi	r30, 0x55	; 85
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	80 81       	ld	r24, Z
     40e:	8e 7f       	andi	r24, 0xFE	; 254
     410:	8c 93       	st	X, r24
     412:	64 c0       	rjmp	.+200    	; 0x4dc <MEXTI_void_intialization+0x170>
		}
	}

	else if(INT == INT1)
     414:	89 81       	ldd	r24, Y+1	; 0x01
     416:	87 30       	cpi	r24, 0x07	; 7
     418:	09 f0       	breq	.+2      	; 0x41c <MEXTI_void_intialization+0xb0>
     41a:	48 c0       	rjmp	.+144    	; 0x4ac <MEXTI_void_intialization+0x140>
	{
		if(Mode == RISING_EDGE) // ISC11 = 1 & ISC10 = 1
     41c:	8a 81       	ldd	r24, Y+2	; 0x02
     41e:	81 30       	cpi	r24, 0x01	; 1
     420:	79 f4       	brne	.+30     	; 0x440 <MEXTI_void_intialization+0xd4>
		{
			SET_BIT(EXTI_MCUCR , ISC10);
     422:	a5 e5       	ldi	r26, 0x55	; 85
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	e5 e5       	ldi	r30, 0x55	; 85
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	80 81       	ld	r24, Z
     42c:	84 60       	ori	r24, 0x04	; 4
     42e:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR , ISC11);
     430:	a5 e5       	ldi	r26, 0x55	; 85
     432:	b0 e0       	ldi	r27, 0x00	; 0
     434:	e5 e5       	ldi	r30, 0x55	; 85
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	80 81       	ld	r24, Z
     43a:	88 60       	ori	r24, 0x08	; 8
     43c:	8c 93       	st	X, r24
     43e:	4e c0       	rjmp	.+156    	; 0x4dc <MEXTI_void_intialization+0x170>
		}
		else if(Mode == FALLING_EDGE)// ISC11 = 1 & ISC10 = 0
     440:	8a 81       	ldd	r24, Y+2	; 0x02
     442:	82 30       	cpi	r24, 0x02	; 2
     444:	79 f4       	brne	.+30     	; 0x464 <MEXTI_void_intialization+0xf8>
		{
			CLEAR_BIT(EXTI_MCUCR , ISC10);
     446:	a5 e5       	ldi	r26, 0x55	; 85
     448:	b0 e0       	ldi	r27, 0x00	; 0
     44a:	e5 e5       	ldi	r30, 0x55	; 85
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	80 81       	ld	r24, Z
     450:	8b 7f       	andi	r24, 0xFB	; 251
     452:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR , ISC11);
     454:	a5 e5       	ldi	r26, 0x55	; 85
     456:	b0 e0       	ldi	r27, 0x00	; 0
     458:	e5 e5       	ldi	r30, 0x55	; 85
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	80 81       	ld	r24, Z
     45e:	88 60       	ori	r24, 0x08	; 8
     460:	8c 93       	st	X, r24
     462:	3c c0       	rjmp	.+120    	; 0x4dc <MEXTI_void_intialization+0x170>
		}
		else if(Mode == LOW_LEVEL)// ISC11 = 0 & ISC10 = 0
     464:	8a 81       	ldd	r24, Y+2	; 0x02
     466:	84 30       	cpi	r24, 0x04	; 4
     468:	79 f4       	brne	.+30     	; 0x488 <MEXTI_void_intialization+0x11c>
		{
			CLEAR_BIT(EXTI_MCUCR , ISC10);
     46a:	a5 e5       	ldi	r26, 0x55	; 85
     46c:	b0 e0       	ldi	r27, 0x00	; 0
     46e:	e5 e5       	ldi	r30, 0x55	; 85
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	80 81       	ld	r24, Z
     474:	8b 7f       	andi	r24, 0xFB	; 251
     476:	8c 93       	st	X, r24
			CLEAR_BIT(EXTI_MCUCR , ISC11);
     478:	a5 e5       	ldi	r26, 0x55	; 85
     47a:	b0 e0       	ldi	r27, 0x00	; 0
     47c:	e5 e5       	ldi	r30, 0x55	; 85
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	80 81       	ld	r24, Z
     482:	87 7f       	andi	r24, 0xF7	; 247
     484:	8c 93       	st	X, r24
     486:	2a c0       	rjmp	.+84     	; 0x4dc <MEXTI_void_intialization+0x170>
		}
		else if(Mode == ANY_CHANGE)// ISC11 = 0 & ISC10 = 1
     488:	8a 81       	ldd	r24, Y+2	; 0x02
     48a:	83 30       	cpi	r24, 0x03	; 3
     48c:	39 f5       	brne	.+78     	; 0x4dc <MEXTI_void_intialization+0x170>
		{
			SET_BIT(EXTI_MCUCR , ISC10);
     48e:	a5 e5       	ldi	r26, 0x55	; 85
     490:	b0 e0       	ldi	r27, 0x00	; 0
     492:	e5 e5       	ldi	r30, 0x55	; 85
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	80 81       	ld	r24, Z
     498:	84 60       	ori	r24, 0x04	; 4
     49a:	8c 93       	st	X, r24
			CLEAR_BIT(EXTI_MCUCR , ISC11);
     49c:	a5 e5       	ldi	r26, 0x55	; 85
     49e:	b0 e0       	ldi	r27, 0x00	; 0
     4a0:	e5 e5       	ldi	r30, 0x55	; 85
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	80 81       	ld	r24, Z
     4a6:	87 7f       	andi	r24, 0xF7	; 247
     4a8:	8c 93       	st	X, r24
     4aa:	18 c0       	rjmp	.+48     	; 0x4dc <MEXTI_void_intialization+0x170>
		}
	}

	else if(INT == INT2)
     4ac:	89 81       	ldd	r24, Y+1	; 0x01
     4ae:	85 30       	cpi	r24, 0x05	; 5
     4b0:	a9 f4       	brne	.+42     	; 0x4dc <MEXTI_void_intialization+0x170>
	{
		if(Mode == RISING_EDGE) // ISC2 = 1
     4b2:	8a 81       	ldd	r24, Y+2	; 0x02
     4b4:	81 30       	cpi	r24, 0x01	; 1
     4b6:	41 f4       	brne	.+16     	; 0x4c8 <MEXTI_void_intialization+0x15c>
			SET_BIT(EXTI_MCUCSR , ISC2);
     4b8:	a4 e5       	ldi	r26, 0x54	; 84
     4ba:	b0 e0       	ldi	r27, 0x00	; 0
     4bc:	e4 e5       	ldi	r30, 0x54	; 84
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	80 81       	ld	r24, Z
     4c2:	80 64       	ori	r24, 0x40	; 64
     4c4:	8c 93       	st	X, r24
     4c6:	0a c0       	rjmp	.+20     	; 0x4dc <MEXTI_void_intialization+0x170>

		else if(Mode == FALLING_EDGE) // ISC2 = 0
     4c8:	8a 81       	ldd	r24, Y+2	; 0x02
     4ca:	82 30       	cpi	r24, 0x02	; 2
     4cc:	39 f4       	brne	.+14     	; 0x4dc <MEXTI_void_intialization+0x170>
			CLEAR_BIT(EXTI_MCUCSR , ISC2);
     4ce:	a4 e5       	ldi	r26, 0x54	; 84
     4d0:	b0 e0       	ldi	r27, 0x00	; 0
     4d2:	e4 e5       	ldi	r30, 0x54	; 84
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	80 81       	ld	r24, Z
     4d8:	8f 7b       	andi	r24, 0xBF	; 191
     4da:	8c 93       	st	X, r24
	}
}
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	cf 91       	pop	r28
     4e2:	df 91       	pop	r29
     4e4:	08 95       	ret

000004e6 <MEXTI_void_setCallBack_INT0>:

void MEXTI_void_setCallBack_INT0(void (*ptr) (void))
{
     4e6:	df 93       	push	r29
     4e8:	cf 93       	push	r28
     4ea:	00 d0       	rcall	.+0      	; 0x4ec <MEXTI_void_setCallBack_INT0+0x6>
     4ec:	cd b7       	in	r28, 0x3d	; 61
     4ee:	de b7       	in	r29, 0x3e	; 62
     4f0:	9a 83       	std	Y+2, r25	; 0x02
     4f2:	89 83       	std	Y+1, r24	; 0x01
	ptr_f0 = ptr;
     4f4:	89 81       	ldd	r24, Y+1	; 0x01
     4f6:	9a 81       	ldd	r25, Y+2	; 0x02
     4f8:	90 93 65 00 	sts	0x0065, r25
     4fc:	80 93 64 00 	sts	0x0064, r24
}
     500:	0f 90       	pop	r0
     502:	0f 90       	pop	r0
     504:	cf 91       	pop	r28
     506:	df 91       	pop	r29
     508:	08 95       	ret

0000050a <MEXTI_void_setCallBack_INT1>:
void MEXTI_void_setCallBack_INT1(void (*ptr) (void))
{
     50a:	df 93       	push	r29
     50c:	cf 93       	push	r28
     50e:	00 d0       	rcall	.+0      	; 0x510 <MEXTI_void_setCallBack_INT1+0x6>
     510:	cd b7       	in	r28, 0x3d	; 61
     512:	de b7       	in	r29, 0x3e	; 62
     514:	9a 83       	std	Y+2, r25	; 0x02
     516:	89 83       	std	Y+1, r24	; 0x01
	ptr_f1 = ptr;
     518:	89 81       	ldd	r24, Y+1	; 0x01
     51a:	9a 81       	ldd	r25, Y+2	; 0x02
     51c:	90 93 69 00 	sts	0x0069, r25
     520:	80 93 68 00 	sts	0x0068, r24
}
     524:	0f 90       	pop	r0
     526:	0f 90       	pop	r0
     528:	cf 91       	pop	r28
     52a:	df 91       	pop	r29
     52c:	08 95       	ret

0000052e <MEXTI_void_setCallBack_INT2>:
void MEXTI_void_setCallBack_INT2(void (*ptr) (void))
{
     52e:	df 93       	push	r29
     530:	cf 93       	push	r28
     532:	00 d0       	rcall	.+0      	; 0x534 <MEXTI_void_setCallBack_INT2+0x6>
     534:	cd b7       	in	r28, 0x3d	; 61
     536:	de b7       	in	r29, 0x3e	; 62
     538:	9a 83       	std	Y+2, r25	; 0x02
     53a:	89 83       	std	Y+1, r24	; 0x01
	ptr_f2 = ptr;
     53c:	89 81       	ldd	r24, Y+1	; 0x01
     53e:	9a 81       	ldd	r25, Y+2	; 0x02
     540:	90 93 67 00 	sts	0x0067, r25
     544:	80 93 66 00 	sts	0x0066, r24
}
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	cf 91       	pop	r28
     54e:	df 91       	pop	r29
     550:	08 95       	ret

00000552 <__vector_1>:

void __vector_1(void)  __attribute((signal));
void __vector_1(void)
{
     552:	1f 92       	push	r1
     554:	0f 92       	push	r0
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	0f 92       	push	r0
     55a:	11 24       	eor	r1, r1
     55c:	2f 93       	push	r18
     55e:	3f 93       	push	r19
     560:	4f 93       	push	r20
     562:	5f 93       	push	r21
     564:	6f 93       	push	r22
     566:	7f 93       	push	r23
     568:	8f 93       	push	r24
     56a:	9f 93       	push	r25
     56c:	af 93       	push	r26
     56e:	bf 93       	push	r27
     570:	ef 93       	push	r30
     572:	ff 93       	push	r31
     574:	df 93       	push	r29
     576:	cf 93       	push	r28
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
	ptr_f0();
     57c:	e0 91 64 00 	lds	r30, 0x0064
     580:	f0 91 65 00 	lds	r31, 0x0065
     584:	09 95       	icall
}
     586:	cf 91       	pop	r28
     588:	df 91       	pop	r29
     58a:	ff 91       	pop	r31
     58c:	ef 91       	pop	r30
     58e:	bf 91       	pop	r27
     590:	af 91       	pop	r26
     592:	9f 91       	pop	r25
     594:	8f 91       	pop	r24
     596:	7f 91       	pop	r23
     598:	6f 91       	pop	r22
     59a:	5f 91       	pop	r21
     59c:	4f 91       	pop	r20
     59e:	3f 91       	pop	r19
     5a0:	2f 91       	pop	r18
     5a2:	0f 90       	pop	r0
     5a4:	0f be       	out	0x3f, r0	; 63
     5a6:	0f 90       	pop	r0
     5a8:	1f 90       	pop	r1
     5aa:	18 95       	reti

000005ac <__vector_2>:
void __vector_2(void)  __attribute((signal));
void __vector_2(void)
{
     5ac:	1f 92       	push	r1
     5ae:	0f 92       	push	r0
     5b0:	0f b6       	in	r0, 0x3f	; 63
     5b2:	0f 92       	push	r0
     5b4:	11 24       	eor	r1, r1
     5b6:	2f 93       	push	r18
     5b8:	3f 93       	push	r19
     5ba:	4f 93       	push	r20
     5bc:	5f 93       	push	r21
     5be:	6f 93       	push	r22
     5c0:	7f 93       	push	r23
     5c2:	8f 93       	push	r24
     5c4:	9f 93       	push	r25
     5c6:	af 93       	push	r26
     5c8:	bf 93       	push	r27
     5ca:	ef 93       	push	r30
     5cc:	ff 93       	push	r31
     5ce:	df 93       	push	r29
     5d0:	cf 93       	push	r28
     5d2:	cd b7       	in	r28, 0x3d	; 61
     5d4:	de b7       	in	r29, 0x3e	; 62
	ptr_f1();
     5d6:	e0 91 68 00 	lds	r30, 0x0068
     5da:	f0 91 69 00 	lds	r31, 0x0069
     5de:	09 95       	icall
}
     5e0:	cf 91       	pop	r28
     5e2:	df 91       	pop	r29
     5e4:	ff 91       	pop	r31
     5e6:	ef 91       	pop	r30
     5e8:	bf 91       	pop	r27
     5ea:	af 91       	pop	r26
     5ec:	9f 91       	pop	r25
     5ee:	8f 91       	pop	r24
     5f0:	7f 91       	pop	r23
     5f2:	6f 91       	pop	r22
     5f4:	5f 91       	pop	r21
     5f6:	4f 91       	pop	r20
     5f8:	3f 91       	pop	r19
     5fa:	2f 91       	pop	r18
     5fc:	0f 90       	pop	r0
     5fe:	0f be       	out	0x3f, r0	; 63
     600:	0f 90       	pop	r0
     602:	1f 90       	pop	r1
     604:	18 95       	reti

00000606 <__vector_3>:
void __vector_3(void)  __attribute((signal));
void __vector_3(void)
{
     606:	1f 92       	push	r1
     608:	0f 92       	push	r0
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	0f 92       	push	r0
     60e:	11 24       	eor	r1, r1
     610:	2f 93       	push	r18
     612:	3f 93       	push	r19
     614:	4f 93       	push	r20
     616:	5f 93       	push	r21
     618:	6f 93       	push	r22
     61a:	7f 93       	push	r23
     61c:	8f 93       	push	r24
     61e:	9f 93       	push	r25
     620:	af 93       	push	r26
     622:	bf 93       	push	r27
     624:	ef 93       	push	r30
     626:	ff 93       	push	r31
     628:	df 93       	push	r29
     62a:	cf 93       	push	r28
     62c:	cd b7       	in	r28, 0x3d	; 61
     62e:	de b7       	in	r29, 0x3e	; 62
	ptr_f2();
     630:	e0 91 66 00 	lds	r30, 0x0066
     634:	f0 91 67 00 	lds	r31, 0x0067
     638:	09 95       	icall
}
     63a:	cf 91       	pop	r28
     63c:	df 91       	pop	r29
     63e:	ff 91       	pop	r31
     640:	ef 91       	pop	r30
     642:	bf 91       	pop	r27
     644:	af 91       	pop	r26
     646:	9f 91       	pop	r25
     648:	8f 91       	pop	r24
     64a:	7f 91       	pop	r23
     64c:	6f 91       	pop	r22
     64e:	5f 91       	pop	r21
     650:	4f 91       	pop	r20
     652:	3f 91       	pop	r19
     654:	2f 91       	pop	r18
     656:	0f 90       	pop	r0
     658:	0f be       	out	0x3f, r0	; 63
     65a:	0f 90       	pop	r0
     65c:	1f 90       	pop	r1
     65e:	18 95       	reti

00000660 <MDIO_void_setpin_value>:
#include"../../LIB/LBIT_MATH.h"
#include"MDIO_private.h"
#include"MDIO_interface.h"

void MDIO_void_setpin_value(port_type port , pin_type pin , value_type value)
{
     660:	df 93       	push	r29
     662:	cf 93       	push	r28
     664:	cd b7       	in	r28, 0x3d	; 61
     666:	de b7       	in	r29, 0x3e	; 62
     668:	27 97       	sbiw	r28, 0x07	; 7
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	de bf       	out	0x3e, r29	; 62
     670:	0f be       	out	0x3f, r0	; 63
     672:	cd bf       	out	0x3d, r28	; 61
     674:	89 83       	std	Y+1, r24	; 0x01
     676:	6a 83       	std	Y+2, r22	; 0x02
     678:	4b 83       	std	Y+3, r20	; 0x03
	if(value == HIGH)
     67a:	8b 81       	ldd	r24, Y+3	; 0x03
     67c:	81 30       	cpi	r24, 0x01	; 1
     67e:	09 f0       	breq	.+2      	; 0x682 <MDIO_void_setpin_value+0x22>
     680:	6f c0       	rjmp	.+222    	; 0x760 <MDIO_void_setpin_value+0x100>
	{
		switch(port)
     682:	89 81       	ldd	r24, Y+1	; 0x01
     684:	28 2f       	mov	r18, r24
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	3f 83       	std	Y+7, r19	; 0x07
     68a:	2e 83       	std	Y+6, r18	; 0x06
     68c:	8e 81       	ldd	r24, Y+6	; 0x06
     68e:	9f 81       	ldd	r25, Y+7	; 0x07
     690:	81 30       	cpi	r24, 0x01	; 1
     692:	91 05       	cpc	r25, r1
     694:	49 f1       	breq	.+82     	; 0x6e8 <MDIO_void_setpin_value+0x88>
     696:	2e 81       	ldd	r18, Y+6	; 0x06
     698:	3f 81       	ldd	r19, Y+7	; 0x07
     69a:	22 30       	cpi	r18, 0x02	; 2
     69c:	31 05       	cpc	r19, r1
     69e:	2c f4       	brge	.+10     	; 0x6aa <MDIO_void_setpin_value+0x4a>
     6a0:	8e 81       	ldd	r24, Y+6	; 0x06
     6a2:	9f 81       	ldd	r25, Y+7	; 0x07
     6a4:	00 97       	sbiw	r24, 0x00	; 0
     6a6:	61 f0       	breq	.+24     	; 0x6c0 <MDIO_void_setpin_value+0x60>
     6a8:	d2 c0       	rjmp	.+420    	; 0x84e <MDIO_void_setpin_value+0x1ee>
     6aa:	2e 81       	ldd	r18, Y+6	; 0x06
     6ac:	3f 81       	ldd	r19, Y+7	; 0x07
     6ae:	22 30       	cpi	r18, 0x02	; 2
     6b0:	31 05       	cpc	r19, r1
     6b2:	71 f1       	breq	.+92     	; 0x710 <MDIO_void_setpin_value+0xb0>
     6b4:	8e 81       	ldd	r24, Y+6	; 0x06
     6b6:	9f 81       	ldd	r25, Y+7	; 0x07
     6b8:	83 30       	cpi	r24, 0x03	; 3
     6ba:	91 05       	cpc	r25, r1
     6bc:	e9 f1       	breq	.+122    	; 0x738 <MDIO_void_setpin_value+0xd8>
     6be:	c7 c0       	rjmp	.+398    	; 0x84e <MDIO_void_setpin_value+0x1ee>
		{
			case PORTA_ID: SET_BIT(PORTA , pin); break;
     6c0:	ab e3       	ldi	r26, 0x3B	; 59
     6c2:	b0 e0       	ldi	r27, 0x00	; 0
     6c4:	eb e3       	ldi	r30, 0x3B	; 59
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	80 81       	ld	r24, Z
     6ca:	48 2f       	mov	r20, r24
     6cc:	8a 81       	ldd	r24, Y+2	; 0x02
     6ce:	28 2f       	mov	r18, r24
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	02 2e       	mov	r0, r18
     6d8:	02 c0       	rjmp	.+4      	; 0x6de <MDIO_void_setpin_value+0x7e>
     6da:	88 0f       	add	r24, r24
     6dc:	99 1f       	adc	r25, r25
     6de:	0a 94       	dec	r0
     6e0:	e2 f7       	brpl	.-8      	; 0x6da <MDIO_void_setpin_value+0x7a>
     6e2:	84 2b       	or	r24, r20
     6e4:	8c 93       	st	X, r24
     6e6:	b3 c0       	rjmp	.+358    	; 0x84e <MDIO_void_setpin_value+0x1ee>
			case PORTB_ID: SET_BIT(PORTB , pin); break;
     6e8:	a8 e3       	ldi	r26, 0x38	; 56
     6ea:	b0 e0       	ldi	r27, 0x00	; 0
     6ec:	e8 e3       	ldi	r30, 0x38	; 56
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	80 81       	ld	r24, Z
     6f2:	48 2f       	mov	r20, r24
     6f4:	8a 81       	ldd	r24, Y+2	; 0x02
     6f6:	28 2f       	mov	r18, r24
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	02 2e       	mov	r0, r18
     700:	02 c0       	rjmp	.+4      	; 0x706 <MDIO_void_setpin_value+0xa6>
     702:	88 0f       	add	r24, r24
     704:	99 1f       	adc	r25, r25
     706:	0a 94       	dec	r0
     708:	e2 f7       	brpl	.-8      	; 0x702 <MDIO_void_setpin_value+0xa2>
     70a:	84 2b       	or	r24, r20
     70c:	8c 93       	st	X, r24
     70e:	9f c0       	rjmp	.+318    	; 0x84e <MDIO_void_setpin_value+0x1ee>
			case PORTC_ID: SET_BIT(PORTC , pin); break;
     710:	a5 e3       	ldi	r26, 0x35	; 53
     712:	b0 e0       	ldi	r27, 0x00	; 0
     714:	e5 e3       	ldi	r30, 0x35	; 53
     716:	f0 e0       	ldi	r31, 0x00	; 0
     718:	80 81       	ld	r24, Z
     71a:	48 2f       	mov	r20, r24
     71c:	8a 81       	ldd	r24, Y+2	; 0x02
     71e:	28 2f       	mov	r18, r24
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	02 2e       	mov	r0, r18
     728:	02 c0       	rjmp	.+4      	; 0x72e <MDIO_void_setpin_value+0xce>
     72a:	88 0f       	add	r24, r24
     72c:	99 1f       	adc	r25, r25
     72e:	0a 94       	dec	r0
     730:	e2 f7       	brpl	.-8      	; 0x72a <MDIO_void_setpin_value+0xca>
     732:	84 2b       	or	r24, r20
     734:	8c 93       	st	X, r24
     736:	8b c0       	rjmp	.+278    	; 0x84e <MDIO_void_setpin_value+0x1ee>
			case PORTD_ID: SET_BIT(PORTD , pin); break;
     738:	a2 e3       	ldi	r26, 0x32	; 50
     73a:	b0 e0       	ldi	r27, 0x00	; 0
     73c:	e2 e3       	ldi	r30, 0x32	; 50
     73e:	f0 e0       	ldi	r31, 0x00	; 0
     740:	80 81       	ld	r24, Z
     742:	48 2f       	mov	r20, r24
     744:	8a 81       	ldd	r24, Y+2	; 0x02
     746:	28 2f       	mov	r18, r24
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	02 2e       	mov	r0, r18
     750:	02 c0       	rjmp	.+4      	; 0x756 <MDIO_void_setpin_value+0xf6>
     752:	88 0f       	add	r24, r24
     754:	99 1f       	adc	r25, r25
     756:	0a 94       	dec	r0
     758:	e2 f7       	brpl	.-8      	; 0x752 <MDIO_void_setpin_value+0xf2>
     75a:	84 2b       	or	r24, r20
     75c:	8c 93       	st	X, r24
     75e:	77 c0       	rjmp	.+238    	; 0x84e <MDIO_void_setpin_value+0x1ee>
		}
	}

	else if(value == LOW)
     760:	8b 81       	ldd	r24, Y+3	; 0x03
     762:	88 23       	and	r24, r24
     764:	09 f0       	breq	.+2      	; 0x768 <MDIO_void_setpin_value+0x108>
     766:	73 c0       	rjmp	.+230    	; 0x84e <MDIO_void_setpin_value+0x1ee>
	{
		switch(port)
     768:	89 81       	ldd	r24, Y+1	; 0x01
     76a:	28 2f       	mov	r18, r24
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	3d 83       	std	Y+5, r19	; 0x05
     770:	2c 83       	std	Y+4, r18	; 0x04
     772:	8c 81       	ldd	r24, Y+4	; 0x04
     774:	9d 81       	ldd	r25, Y+5	; 0x05
     776:	81 30       	cpi	r24, 0x01	; 1
     778:	91 05       	cpc	r25, r1
     77a:	59 f1       	breq	.+86     	; 0x7d2 <MDIO_void_setpin_value+0x172>
     77c:	2c 81       	ldd	r18, Y+4	; 0x04
     77e:	3d 81       	ldd	r19, Y+5	; 0x05
     780:	22 30       	cpi	r18, 0x02	; 2
     782:	31 05       	cpc	r19, r1
     784:	2c f4       	brge	.+10     	; 0x790 <MDIO_void_setpin_value+0x130>
     786:	8c 81       	ldd	r24, Y+4	; 0x04
     788:	9d 81       	ldd	r25, Y+5	; 0x05
     78a:	00 97       	sbiw	r24, 0x00	; 0
     78c:	69 f0       	breq	.+26     	; 0x7a8 <MDIO_void_setpin_value+0x148>
     78e:	5f c0       	rjmp	.+190    	; 0x84e <MDIO_void_setpin_value+0x1ee>
     790:	2c 81       	ldd	r18, Y+4	; 0x04
     792:	3d 81       	ldd	r19, Y+5	; 0x05
     794:	22 30       	cpi	r18, 0x02	; 2
     796:	31 05       	cpc	r19, r1
     798:	89 f1       	breq	.+98     	; 0x7fc <MDIO_void_setpin_value+0x19c>
     79a:	8c 81       	ldd	r24, Y+4	; 0x04
     79c:	9d 81       	ldd	r25, Y+5	; 0x05
     79e:	83 30       	cpi	r24, 0x03	; 3
     7a0:	91 05       	cpc	r25, r1
     7a2:	09 f4       	brne	.+2      	; 0x7a6 <MDIO_void_setpin_value+0x146>
     7a4:	40 c0       	rjmp	.+128    	; 0x826 <MDIO_void_setpin_value+0x1c6>
     7a6:	53 c0       	rjmp	.+166    	; 0x84e <MDIO_void_setpin_value+0x1ee>
		{
			case PORTA_ID: CLEAR_BIT(PORTA , pin); break;
     7a8:	ab e3       	ldi	r26, 0x3B	; 59
     7aa:	b0 e0       	ldi	r27, 0x00	; 0
     7ac:	eb e3       	ldi	r30, 0x3B	; 59
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	80 81       	ld	r24, Z
     7b2:	48 2f       	mov	r20, r24
     7b4:	8a 81       	ldd	r24, Y+2	; 0x02
     7b6:	28 2f       	mov	r18, r24
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	02 2e       	mov	r0, r18
     7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <MDIO_void_setpin_value+0x166>
     7c2:	88 0f       	add	r24, r24
     7c4:	99 1f       	adc	r25, r25
     7c6:	0a 94       	dec	r0
     7c8:	e2 f7       	brpl	.-8      	; 0x7c2 <MDIO_void_setpin_value+0x162>
     7ca:	80 95       	com	r24
     7cc:	84 23       	and	r24, r20
     7ce:	8c 93       	st	X, r24
     7d0:	3e c0       	rjmp	.+124    	; 0x84e <MDIO_void_setpin_value+0x1ee>
			case PORTB_ID: CLEAR_BIT(PORTB , pin); break;
     7d2:	a8 e3       	ldi	r26, 0x38	; 56
     7d4:	b0 e0       	ldi	r27, 0x00	; 0
     7d6:	e8 e3       	ldi	r30, 0x38	; 56
     7d8:	f0 e0       	ldi	r31, 0x00	; 0
     7da:	80 81       	ld	r24, Z
     7dc:	48 2f       	mov	r20, r24
     7de:	8a 81       	ldd	r24, Y+2	; 0x02
     7e0:	28 2f       	mov	r18, r24
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	02 2e       	mov	r0, r18
     7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <MDIO_void_setpin_value+0x190>
     7ec:	88 0f       	add	r24, r24
     7ee:	99 1f       	adc	r25, r25
     7f0:	0a 94       	dec	r0
     7f2:	e2 f7       	brpl	.-8      	; 0x7ec <MDIO_void_setpin_value+0x18c>
     7f4:	80 95       	com	r24
     7f6:	84 23       	and	r24, r20
     7f8:	8c 93       	st	X, r24
     7fa:	29 c0       	rjmp	.+82     	; 0x84e <MDIO_void_setpin_value+0x1ee>
			case PORTC_ID: CLEAR_BIT(PORTC , pin); break;
     7fc:	a5 e3       	ldi	r26, 0x35	; 53
     7fe:	b0 e0       	ldi	r27, 0x00	; 0
     800:	e5 e3       	ldi	r30, 0x35	; 53
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 81       	ld	r24, Z
     806:	48 2f       	mov	r20, r24
     808:	8a 81       	ldd	r24, Y+2	; 0x02
     80a:	28 2f       	mov	r18, r24
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	02 2e       	mov	r0, r18
     814:	02 c0       	rjmp	.+4      	; 0x81a <MDIO_void_setpin_value+0x1ba>
     816:	88 0f       	add	r24, r24
     818:	99 1f       	adc	r25, r25
     81a:	0a 94       	dec	r0
     81c:	e2 f7       	brpl	.-8      	; 0x816 <MDIO_void_setpin_value+0x1b6>
     81e:	80 95       	com	r24
     820:	84 23       	and	r24, r20
     822:	8c 93       	st	X, r24
     824:	14 c0       	rjmp	.+40     	; 0x84e <MDIO_void_setpin_value+0x1ee>
			case PORTD_ID: CLEAR_BIT(PORTD , pin); break;
     826:	a2 e3       	ldi	r26, 0x32	; 50
     828:	b0 e0       	ldi	r27, 0x00	; 0
     82a:	e2 e3       	ldi	r30, 0x32	; 50
     82c:	f0 e0       	ldi	r31, 0x00	; 0
     82e:	80 81       	ld	r24, Z
     830:	48 2f       	mov	r20, r24
     832:	8a 81       	ldd	r24, Y+2	; 0x02
     834:	28 2f       	mov	r18, r24
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	02 2e       	mov	r0, r18
     83e:	02 c0       	rjmp	.+4      	; 0x844 <MDIO_void_setpin_value+0x1e4>
     840:	88 0f       	add	r24, r24
     842:	99 1f       	adc	r25, r25
     844:	0a 94       	dec	r0
     846:	e2 f7       	brpl	.-8      	; 0x840 <MDIO_void_setpin_value+0x1e0>
     848:	80 95       	com	r24
     84a:	84 23       	and	r24, r20
     84c:	8c 93       	st	X, r24
		}
	}

}
     84e:	27 96       	adiw	r28, 0x07	; 7
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	f8 94       	cli
     854:	de bf       	out	0x3e, r29	; 62
     856:	0f be       	out	0x3f, r0	; 63
     858:	cd bf       	out	0x3d, r28	; 61
     85a:	cf 91       	pop	r28
     85c:	df 91       	pop	r29
     85e:	08 95       	ret

00000860 <MDIO_void_toggle_pin>:
void MDIO_void_toggle_pin(port_type port , pin_type pin)
{
     860:	df 93       	push	r29
     862:	cf 93       	push	r28
     864:	00 d0       	rcall	.+0      	; 0x866 <MDIO_void_toggle_pin+0x6>
     866:	00 d0       	rcall	.+0      	; 0x868 <MDIO_void_toggle_pin+0x8>
     868:	cd b7       	in	r28, 0x3d	; 61
     86a:	de b7       	in	r29, 0x3e	; 62
     86c:	89 83       	std	Y+1, r24	; 0x01
     86e:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
     870:	89 81       	ldd	r24, Y+1	; 0x01
     872:	28 2f       	mov	r18, r24
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	3c 83       	std	Y+4, r19	; 0x04
     878:	2b 83       	std	Y+3, r18	; 0x03
     87a:	8b 81       	ldd	r24, Y+3	; 0x03
     87c:	9c 81       	ldd	r25, Y+4	; 0x04
     87e:	81 30       	cpi	r24, 0x01	; 1
     880:	91 05       	cpc	r25, r1
     882:	49 f1       	breq	.+82     	; 0x8d6 <MDIO_void_toggle_pin+0x76>
     884:	2b 81       	ldd	r18, Y+3	; 0x03
     886:	3c 81       	ldd	r19, Y+4	; 0x04
     888:	22 30       	cpi	r18, 0x02	; 2
     88a:	31 05       	cpc	r19, r1
     88c:	2c f4       	brge	.+10     	; 0x898 <MDIO_void_toggle_pin+0x38>
     88e:	8b 81       	ldd	r24, Y+3	; 0x03
     890:	9c 81       	ldd	r25, Y+4	; 0x04
     892:	00 97       	sbiw	r24, 0x00	; 0
     894:	61 f0       	breq	.+24     	; 0x8ae <MDIO_void_toggle_pin+0x4e>
     896:	5a c0       	rjmp	.+180    	; 0x94c <MDIO_void_toggle_pin+0xec>
     898:	2b 81       	ldd	r18, Y+3	; 0x03
     89a:	3c 81       	ldd	r19, Y+4	; 0x04
     89c:	22 30       	cpi	r18, 0x02	; 2
     89e:	31 05       	cpc	r19, r1
     8a0:	71 f1       	breq	.+92     	; 0x8fe <MDIO_void_toggle_pin+0x9e>
     8a2:	8b 81       	ldd	r24, Y+3	; 0x03
     8a4:	9c 81       	ldd	r25, Y+4	; 0x04
     8a6:	83 30       	cpi	r24, 0x03	; 3
     8a8:	91 05       	cpc	r25, r1
     8aa:	e9 f1       	breq	.+122    	; 0x926 <MDIO_void_toggle_pin+0xc6>
     8ac:	4f c0       	rjmp	.+158    	; 0x94c <MDIO_void_toggle_pin+0xec>
	{
		case PORTA_ID: TOGGLE_BIT(PORTA , pin); break;
     8ae:	ab e3       	ldi	r26, 0x3B	; 59
     8b0:	b0 e0       	ldi	r27, 0x00	; 0
     8b2:	eb e3       	ldi	r30, 0x3B	; 59
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	80 81       	ld	r24, Z
     8b8:	48 2f       	mov	r20, r24
     8ba:	8a 81       	ldd	r24, Y+2	; 0x02
     8bc:	28 2f       	mov	r18, r24
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	02 2e       	mov	r0, r18
     8c6:	02 c0       	rjmp	.+4      	; 0x8cc <MDIO_void_toggle_pin+0x6c>
     8c8:	88 0f       	add	r24, r24
     8ca:	99 1f       	adc	r25, r25
     8cc:	0a 94       	dec	r0
     8ce:	e2 f7       	brpl	.-8      	; 0x8c8 <MDIO_void_toggle_pin+0x68>
     8d0:	84 27       	eor	r24, r20
     8d2:	8c 93       	st	X, r24
     8d4:	3b c0       	rjmp	.+118    	; 0x94c <MDIO_void_toggle_pin+0xec>
		case PORTB_ID: TOGGLE_BIT(PORTB , pin); break;
     8d6:	a8 e3       	ldi	r26, 0x38	; 56
     8d8:	b0 e0       	ldi	r27, 0x00	; 0
     8da:	e8 e3       	ldi	r30, 0x38	; 56
     8dc:	f0 e0       	ldi	r31, 0x00	; 0
     8de:	80 81       	ld	r24, Z
     8e0:	48 2f       	mov	r20, r24
     8e2:	8a 81       	ldd	r24, Y+2	; 0x02
     8e4:	28 2f       	mov	r18, r24
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	02 2e       	mov	r0, r18
     8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <MDIO_void_toggle_pin+0x94>
     8f0:	88 0f       	add	r24, r24
     8f2:	99 1f       	adc	r25, r25
     8f4:	0a 94       	dec	r0
     8f6:	e2 f7       	brpl	.-8      	; 0x8f0 <MDIO_void_toggle_pin+0x90>
     8f8:	84 27       	eor	r24, r20
     8fa:	8c 93       	st	X, r24
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <MDIO_void_toggle_pin+0xec>
		case PORTC_ID: TOGGLE_BIT(PORTC , pin); break;
     8fe:	a5 e3       	ldi	r26, 0x35	; 53
     900:	b0 e0       	ldi	r27, 0x00	; 0
     902:	e5 e3       	ldi	r30, 0x35	; 53
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	80 81       	ld	r24, Z
     908:	48 2f       	mov	r20, r24
     90a:	8a 81       	ldd	r24, Y+2	; 0x02
     90c:	28 2f       	mov	r18, r24
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	02 2e       	mov	r0, r18
     916:	02 c0       	rjmp	.+4      	; 0x91c <MDIO_void_toggle_pin+0xbc>
     918:	88 0f       	add	r24, r24
     91a:	99 1f       	adc	r25, r25
     91c:	0a 94       	dec	r0
     91e:	e2 f7       	brpl	.-8      	; 0x918 <MDIO_void_toggle_pin+0xb8>
     920:	84 27       	eor	r24, r20
     922:	8c 93       	st	X, r24
     924:	13 c0       	rjmp	.+38     	; 0x94c <MDIO_void_toggle_pin+0xec>
		case PORTD_ID: TOGGLE_BIT(PORTD , pin); break;
     926:	a2 e3       	ldi	r26, 0x32	; 50
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	e2 e3       	ldi	r30, 0x32	; 50
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	80 81       	ld	r24, Z
     930:	48 2f       	mov	r20, r24
     932:	8a 81       	ldd	r24, Y+2	; 0x02
     934:	28 2f       	mov	r18, r24
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	02 2e       	mov	r0, r18
     93e:	02 c0       	rjmp	.+4      	; 0x944 <MDIO_void_toggle_pin+0xe4>
     940:	88 0f       	add	r24, r24
     942:	99 1f       	adc	r25, r25
     944:	0a 94       	dec	r0
     946:	e2 f7       	brpl	.-8      	; 0x940 <MDIO_void_toggle_pin+0xe0>
     948:	84 27       	eor	r24, r20
     94a:	8c 93       	st	X, r24
	}
}
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
     950:	0f 90       	pop	r0
     952:	0f 90       	pop	r0
     954:	cf 91       	pop	r28
     956:	df 91       	pop	r29
     958:	08 95       	ret

0000095a <MDIO_void_setpin_direction>:

void MDIO_void_setpin_direction(port_type port, pin_type pin, direction_type direction)
{
     95a:	df 93       	push	r29
     95c:	cf 93       	push	r28
     95e:	cd b7       	in	r28, 0x3d	; 61
     960:	de b7       	in	r29, 0x3e	; 62
     962:	27 97       	sbiw	r28, 0x07	; 7
     964:	0f b6       	in	r0, 0x3f	; 63
     966:	f8 94       	cli
     968:	de bf       	out	0x3e, r29	; 62
     96a:	0f be       	out	0x3f, r0	; 63
     96c:	cd bf       	out	0x3d, r28	; 61
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	6a 83       	std	Y+2, r22	; 0x02
     972:	4b 83       	std	Y+3, r20	; 0x03
	if(direction == OUTPUT)
     974:	8b 81       	ldd	r24, Y+3	; 0x03
     976:	81 30       	cpi	r24, 0x01	; 1
     978:	09 f0       	breq	.+2      	; 0x97c <MDIO_void_setpin_direction+0x22>
     97a:	6f c0       	rjmp	.+222    	; 0xa5a <MDIO_void_setpin_direction+0x100>
	{
		switch(port)
     97c:	89 81       	ldd	r24, Y+1	; 0x01
     97e:	28 2f       	mov	r18, r24
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	3f 83       	std	Y+7, r19	; 0x07
     984:	2e 83       	std	Y+6, r18	; 0x06
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	9f 81       	ldd	r25, Y+7	; 0x07
     98a:	81 30       	cpi	r24, 0x01	; 1
     98c:	91 05       	cpc	r25, r1
     98e:	49 f1       	breq	.+82     	; 0x9e2 <MDIO_void_setpin_direction+0x88>
     990:	2e 81       	ldd	r18, Y+6	; 0x06
     992:	3f 81       	ldd	r19, Y+7	; 0x07
     994:	22 30       	cpi	r18, 0x02	; 2
     996:	31 05       	cpc	r19, r1
     998:	2c f4       	brge	.+10     	; 0x9a4 <MDIO_void_setpin_direction+0x4a>
     99a:	8e 81       	ldd	r24, Y+6	; 0x06
     99c:	9f 81       	ldd	r25, Y+7	; 0x07
     99e:	00 97       	sbiw	r24, 0x00	; 0
     9a0:	61 f0       	breq	.+24     	; 0x9ba <MDIO_void_setpin_direction+0x60>
     9a2:	d2 c0       	rjmp	.+420    	; 0xb48 <MDIO_void_setpin_direction+0x1ee>
     9a4:	2e 81       	ldd	r18, Y+6	; 0x06
     9a6:	3f 81       	ldd	r19, Y+7	; 0x07
     9a8:	22 30       	cpi	r18, 0x02	; 2
     9aa:	31 05       	cpc	r19, r1
     9ac:	71 f1       	breq	.+92     	; 0xa0a <MDIO_void_setpin_direction+0xb0>
     9ae:	8e 81       	ldd	r24, Y+6	; 0x06
     9b0:	9f 81       	ldd	r25, Y+7	; 0x07
     9b2:	83 30       	cpi	r24, 0x03	; 3
     9b4:	91 05       	cpc	r25, r1
     9b6:	e9 f1       	breq	.+122    	; 0xa32 <MDIO_void_setpin_direction+0xd8>
     9b8:	c7 c0       	rjmp	.+398    	; 0xb48 <MDIO_void_setpin_direction+0x1ee>
		{
			case PORTA_ID: SET_BIT(DDRA , pin); break;
     9ba:	aa e3       	ldi	r26, 0x3A	; 58
     9bc:	b0 e0       	ldi	r27, 0x00	; 0
     9be:	ea e3       	ldi	r30, 0x3A	; 58
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	80 81       	ld	r24, Z
     9c4:	48 2f       	mov	r20, r24
     9c6:	8a 81       	ldd	r24, Y+2	; 0x02
     9c8:	28 2f       	mov	r18, r24
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	02 2e       	mov	r0, r18
     9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <MDIO_void_setpin_direction+0x7e>
     9d4:	88 0f       	add	r24, r24
     9d6:	99 1f       	adc	r25, r25
     9d8:	0a 94       	dec	r0
     9da:	e2 f7       	brpl	.-8      	; 0x9d4 <MDIO_void_setpin_direction+0x7a>
     9dc:	84 2b       	or	r24, r20
     9de:	8c 93       	st	X, r24
     9e0:	b3 c0       	rjmp	.+358    	; 0xb48 <MDIO_void_setpin_direction+0x1ee>
			case PORTB_ID: SET_BIT(DDRB , pin); break;
     9e2:	a7 e3       	ldi	r26, 0x37	; 55
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	e7 e3       	ldi	r30, 0x37	; 55
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	80 81       	ld	r24, Z
     9ec:	48 2f       	mov	r20, r24
     9ee:	8a 81       	ldd	r24, Y+2	; 0x02
     9f0:	28 2f       	mov	r18, r24
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	02 2e       	mov	r0, r18
     9fa:	02 c0       	rjmp	.+4      	; 0xa00 <MDIO_void_setpin_direction+0xa6>
     9fc:	88 0f       	add	r24, r24
     9fe:	99 1f       	adc	r25, r25
     a00:	0a 94       	dec	r0
     a02:	e2 f7       	brpl	.-8      	; 0x9fc <MDIO_void_setpin_direction+0xa2>
     a04:	84 2b       	or	r24, r20
     a06:	8c 93       	st	X, r24
     a08:	9f c0       	rjmp	.+318    	; 0xb48 <MDIO_void_setpin_direction+0x1ee>
			case PORTC_ID: SET_BIT(DDRC , pin); break;
     a0a:	a4 e3       	ldi	r26, 0x34	; 52
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	e4 e3       	ldi	r30, 0x34	; 52
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	80 81       	ld	r24, Z
     a14:	48 2f       	mov	r20, r24
     a16:	8a 81       	ldd	r24, Y+2	; 0x02
     a18:	28 2f       	mov	r18, r24
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	02 2e       	mov	r0, r18
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <MDIO_void_setpin_direction+0xce>
     a24:	88 0f       	add	r24, r24
     a26:	99 1f       	adc	r25, r25
     a28:	0a 94       	dec	r0
     a2a:	e2 f7       	brpl	.-8      	; 0xa24 <MDIO_void_setpin_direction+0xca>
     a2c:	84 2b       	or	r24, r20
     a2e:	8c 93       	st	X, r24
     a30:	8b c0       	rjmp	.+278    	; 0xb48 <MDIO_void_setpin_direction+0x1ee>
			case PORTD_ID: SET_BIT(DDRD , pin); break;
     a32:	a1 e3       	ldi	r26, 0x31	; 49
     a34:	b0 e0       	ldi	r27, 0x00	; 0
     a36:	e1 e3       	ldi	r30, 0x31	; 49
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	80 81       	ld	r24, Z
     a3c:	48 2f       	mov	r20, r24
     a3e:	8a 81       	ldd	r24, Y+2	; 0x02
     a40:	28 2f       	mov	r18, r24
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	02 2e       	mov	r0, r18
     a4a:	02 c0       	rjmp	.+4      	; 0xa50 <MDIO_void_setpin_direction+0xf6>
     a4c:	88 0f       	add	r24, r24
     a4e:	99 1f       	adc	r25, r25
     a50:	0a 94       	dec	r0
     a52:	e2 f7       	brpl	.-8      	; 0xa4c <MDIO_void_setpin_direction+0xf2>
     a54:	84 2b       	or	r24, r20
     a56:	8c 93       	st	X, r24
     a58:	77 c0       	rjmp	.+238    	; 0xb48 <MDIO_void_setpin_direction+0x1ee>
		}
	}

	else if(direction == INPUT)
     a5a:	8b 81       	ldd	r24, Y+3	; 0x03
     a5c:	88 23       	and	r24, r24
     a5e:	09 f0       	breq	.+2      	; 0xa62 <MDIO_void_setpin_direction+0x108>
     a60:	73 c0       	rjmp	.+230    	; 0xb48 <MDIO_void_setpin_direction+0x1ee>
	{
		switch(port)
     a62:	89 81       	ldd	r24, Y+1	; 0x01
     a64:	28 2f       	mov	r18, r24
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	3d 83       	std	Y+5, r19	; 0x05
     a6a:	2c 83       	std	Y+4, r18	; 0x04
     a6c:	8c 81       	ldd	r24, Y+4	; 0x04
     a6e:	9d 81       	ldd	r25, Y+5	; 0x05
     a70:	81 30       	cpi	r24, 0x01	; 1
     a72:	91 05       	cpc	r25, r1
     a74:	59 f1       	breq	.+86     	; 0xacc <MDIO_void_setpin_direction+0x172>
     a76:	2c 81       	ldd	r18, Y+4	; 0x04
     a78:	3d 81       	ldd	r19, Y+5	; 0x05
     a7a:	22 30       	cpi	r18, 0x02	; 2
     a7c:	31 05       	cpc	r19, r1
     a7e:	2c f4       	brge	.+10     	; 0xa8a <MDIO_void_setpin_direction+0x130>
     a80:	8c 81       	ldd	r24, Y+4	; 0x04
     a82:	9d 81       	ldd	r25, Y+5	; 0x05
     a84:	00 97       	sbiw	r24, 0x00	; 0
     a86:	69 f0       	breq	.+26     	; 0xaa2 <MDIO_void_setpin_direction+0x148>
     a88:	5f c0       	rjmp	.+190    	; 0xb48 <MDIO_void_setpin_direction+0x1ee>
     a8a:	2c 81       	ldd	r18, Y+4	; 0x04
     a8c:	3d 81       	ldd	r19, Y+5	; 0x05
     a8e:	22 30       	cpi	r18, 0x02	; 2
     a90:	31 05       	cpc	r19, r1
     a92:	89 f1       	breq	.+98     	; 0xaf6 <MDIO_void_setpin_direction+0x19c>
     a94:	8c 81       	ldd	r24, Y+4	; 0x04
     a96:	9d 81       	ldd	r25, Y+5	; 0x05
     a98:	83 30       	cpi	r24, 0x03	; 3
     a9a:	91 05       	cpc	r25, r1
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <MDIO_void_setpin_direction+0x146>
     a9e:	40 c0       	rjmp	.+128    	; 0xb20 <MDIO_void_setpin_direction+0x1c6>
     aa0:	53 c0       	rjmp	.+166    	; 0xb48 <MDIO_void_setpin_direction+0x1ee>
		{
			case PORTA_ID: CLEAR_BIT(DDRA , pin); break;
     aa2:	aa e3       	ldi	r26, 0x3A	; 58
     aa4:	b0 e0       	ldi	r27, 0x00	; 0
     aa6:	ea e3       	ldi	r30, 0x3A	; 58
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	80 81       	ld	r24, Z
     aac:	48 2f       	mov	r20, r24
     aae:	8a 81       	ldd	r24, Y+2	; 0x02
     ab0:	28 2f       	mov	r18, r24
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	02 2e       	mov	r0, r18
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <MDIO_void_setpin_direction+0x166>
     abc:	88 0f       	add	r24, r24
     abe:	99 1f       	adc	r25, r25
     ac0:	0a 94       	dec	r0
     ac2:	e2 f7       	brpl	.-8      	; 0xabc <MDIO_void_setpin_direction+0x162>
     ac4:	80 95       	com	r24
     ac6:	84 23       	and	r24, r20
     ac8:	8c 93       	st	X, r24
     aca:	3e c0       	rjmp	.+124    	; 0xb48 <MDIO_void_setpin_direction+0x1ee>
			case PORTB_ID: CLEAR_BIT(DDRB , pin); break;
     acc:	a7 e3       	ldi	r26, 0x37	; 55
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e7 e3       	ldi	r30, 0x37	; 55
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	80 81       	ld	r24, Z
     ad6:	48 2f       	mov	r20, r24
     ad8:	8a 81       	ldd	r24, Y+2	; 0x02
     ada:	28 2f       	mov	r18, r24
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	02 2e       	mov	r0, r18
     ae4:	02 c0       	rjmp	.+4      	; 0xaea <MDIO_void_setpin_direction+0x190>
     ae6:	88 0f       	add	r24, r24
     ae8:	99 1f       	adc	r25, r25
     aea:	0a 94       	dec	r0
     aec:	e2 f7       	brpl	.-8      	; 0xae6 <MDIO_void_setpin_direction+0x18c>
     aee:	80 95       	com	r24
     af0:	84 23       	and	r24, r20
     af2:	8c 93       	st	X, r24
     af4:	29 c0       	rjmp	.+82     	; 0xb48 <MDIO_void_setpin_direction+0x1ee>
			case PORTC_ID: CLEAR_BIT(DDRC , pin); break;
     af6:	a4 e3       	ldi	r26, 0x34	; 52
     af8:	b0 e0       	ldi	r27, 0x00	; 0
     afa:	e4 e3       	ldi	r30, 0x34	; 52
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	80 81       	ld	r24, Z
     b00:	48 2f       	mov	r20, r24
     b02:	8a 81       	ldd	r24, Y+2	; 0x02
     b04:	28 2f       	mov	r18, r24
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	02 2e       	mov	r0, r18
     b0e:	02 c0       	rjmp	.+4      	; 0xb14 <MDIO_void_setpin_direction+0x1ba>
     b10:	88 0f       	add	r24, r24
     b12:	99 1f       	adc	r25, r25
     b14:	0a 94       	dec	r0
     b16:	e2 f7       	brpl	.-8      	; 0xb10 <MDIO_void_setpin_direction+0x1b6>
     b18:	80 95       	com	r24
     b1a:	84 23       	and	r24, r20
     b1c:	8c 93       	st	X, r24
     b1e:	14 c0       	rjmp	.+40     	; 0xb48 <MDIO_void_setpin_direction+0x1ee>
			case PORTD_ID: CLEAR_BIT(DDRD , pin); break;
     b20:	a1 e3       	ldi	r26, 0x31	; 49
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	e1 e3       	ldi	r30, 0x31	; 49
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	80 81       	ld	r24, Z
     b2a:	48 2f       	mov	r20, r24
     b2c:	8a 81       	ldd	r24, Y+2	; 0x02
     b2e:	28 2f       	mov	r18, r24
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	02 2e       	mov	r0, r18
     b38:	02 c0       	rjmp	.+4      	; 0xb3e <MDIO_void_setpin_direction+0x1e4>
     b3a:	88 0f       	add	r24, r24
     b3c:	99 1f       	adc	r25, r25
     b3e:	0a 94       	dec	r0
     b40:	e2 f7       	brpl	.-8      	; 0xb3a <MDIO_void_setpin_direction+0x1e0>
     b42:	80 95       	com	r24
     b44:	84 23       	and	r24, r20
     b46:	8c 93       	st	X, r24
		}
	}

}
     b48:	27 96       	adiw	r28, 0x07	; 7
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	f8 94       	cli
     b4e:	de bf       	out	0x3e, r29	; 62
     b50:	0f be       	out	0x3f, r0	; 63
     b52:	cd bf       	out	0x3d, r28	; 61
     b54:	cf 91       	pop	r28
     b56:	df 91       	pop	r29
     b58:	08 95       	ret

00000b5a <MDIO_value_type_getpin_value>:

value_type MDIO_value_type_getpin_value(port_type port, pin_type pin)
{
     b5a:	df 93       	push	r29
     b5c:	cf 93       	push	r28
     b5e:	00 d0       	rcall	.+0      	; 0xb60 <MDIO_value_type_getpin_value+0x6>
     b60:	00 d0       	rcall	.+0      	; 0xb62 <MDIO_value_type_getpin_value+0x8>
     b62:	0f 92       	push	r0
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
     b68:	8a 83       	std	Y+2, r24	; 0x02
     b6a:	6b 83       	std	Y+3, r22	; 0x03
	value_type ret_value;
	switch(port)
     b6c:	8a 81       	ldd	r24, Y+2	; 0x02
     b6e:	28 2f       	mov	r18, r24
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	3d 83       	std	Y+5, r19	; 0x05
     b74:	2c 83       	std	Y+4, r18	; 0x04
     b76:	4c 81       	ldd	r20, Y+4	; 0x04
     b78:	5d 81       	ldd	r21, Y+5	; 0x05
     b7a:	41 30       	cpi	r20, 0x01	; 1
     b7c:	51 05       	cpc	r21, r1
     b7e:	41 f1       	breq	.+80     	; 0xbd0 <MDIO_value_type_getpin_value+0x76>
     b80:	8c 81       	ldd	r24, Y+4	; 0x04
     b82:	9d 81       	ldd	r25, Y+5	; 0x05
     b84:	82 30       	cpi	r24, 0x02	; 2
     b86:	91 05       	cpc	r25, r1
     b88:	34 f4       	brge	.+12     	; 0xb96 <MDIO_value_type_getpin_value+0x3c>
     b8a:	2c 81       	ldd	r18, Y+4	; 0x04
     b8c:	3d 81       	ldd	r19, Y+5	; 0x05
     b8e:	21 15       	cp	r18, r1
     b90:	31 05       	cpc	r19, r1
     b92:	61 f0       	breq	.+24     	; 0xbac <MDIO_value_type_getpin_value+0x52>
     b94:	52 c0       	rjmp	.+164    	; 0xc3a <MDIO_value_type_getpin_value+0xe0>
     b96:	4c 81       	ldd	r20, Y+4	; 0x04
     b98:	5d 81       	ldd	r21, Y+5	; 0x05
     b9a:	42 30       	cpi	r20, 0x02	; 2
     b9c:	51 05       	cpc	r21, r1
     b9e:	51 f1       	breq	.+84     	; 0xbf4 <MDIO_value_type_getpin_value+0x9a>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	b9 f1       	breq	.+110    	; 0xc18 <MDIO_value_type_getpin_value+0xbe>
     baa:	47 c0       	rjmp	.+142    	; 0xc3a <MDIO_value_type_getpin_value+0xe0>
	{
		case PORTA_ID: ret_value = GET_BIT(PINA , pin); break;
     bac:	e9 e3       	ldi	r30, 0x39	; 57
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	88 2f       	mov	r24, r24
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	a9 01       	movw	r20, r18
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <MDIO_value_type_getpin_value+0x6a>
     bc0:	55 95       	asr	r21
     bc2:	47 95       	ror	r20
     bc4:	8a 95       	dec	r24
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <MDIO_value_type_getpin_value+0x66>
     bc8:	ca 01       	movw	r24, r20
     bca:	81 70       	andi	r24, 0x01	; 1
     bcc:	89 83       	std	Y+1, r24	; 0x01
     bce:	35 c0       	rjmp	.+106    	; 0xc3a <MDIO_value_type_getpin_value+0xe0>
		case PORTB_ID: ret_value = GET_BIT(PINB , pin); break;
     bd0:	e6 e3       	ldi	r30, 0x36	; 54
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	28 2f       	mov	r18, r24
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	8b 81       	ldd	r24, Y+3	; 0x03
     bdc:	88 2f       	mov	r24, r24
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	a9 01       	movw	r20, r18
     be2:	02 c0       	rjmp	.+4      	; 0xbe8 <MDIO_value_type_getpin_value+0x8e>
     be4:	55 95       	asr	r21
     be6:	47 95       	ror	r20
     be8:	8a 95       	dec	r24
     bea:	e2 f7       	brpl	.-8      	; 0xbe4 <MDIO_value_type_getpin_value+0x8a>
     bec:	ca 01       	movw	r24, r20
     bee:	81 70       	andi	r24, 0x01	; 1
     bf0:	89 83       	std	Y+1, r24	; 0x01
     bf2:	23 c0       	rjmp	.+70     	; 0xc3a <MDIO_value_type_getpin_value+0xe0>
		case PORTC_ID: ret_value = GET_BIT(PINC , pin); break;
     bf4:	e3 e3       	ldi	r30, 0x33	; 51
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	28 2f       	mov	r18, r24
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	88 2f       	mov	r24, r24
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	a9 01       	movw	r20, r18
     c06:	02 c0       	rjmp	.+4      	; 0xc0c <MDIO_value_type_getpin_value+0xb2>
     c08:	55 95       	asr	r21
     c0a:	47 95       	ror	r20
     c0c:	8a 95       	dec	r24
     c0e:	e2 f7       	brpl	.-8      	; 0xc08 <MDIO_value_type_getpin_value+0xae>
     c10:	ca 01       	movw	r24, r20
     c12:	81 70       	andi	r24, 0x01	; 1
     c14:	89 83       	std	Y+1, r24	; 0x01
     c16:	11 c0       	rjmp	.+34     	; 0xc3a <MDIO_value_type_getpin_value+0xe0>
		case PORTD_ID: ret_value = GET_BIT(PIND , pin); break;
     c18:	e0 e3       	ldi	r30, 0x30	; 48
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	28 2f       	mov	r18, r24
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	8b 81       	ldd	r24, Y+3	; 0x03
     c24:	88 2f       	mov	r24, r24
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	a9 01       	movw	r20, r18
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <MDIO_value_type_getpin_value+0xd6>
     c2c:	55 95       	asr	r21
     c2e:	47 95       	ror	r20
     c30:	8a 95       	dec	r24
     c32:	e2 f7       	brpl	.-8      	; 0xc2c <MDIO_value_type_getpin_value+0xd2>
     c34:	ca 01       	movw	r24, r20
     c36:	81 70       	andi	r24, 0x01	; 1
     c38:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret_value;
     c3a:	89 81       	ldd	r24, Y+1	; 0x01
}
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	08 95       	ret

00000c4c <MDIO_void_setport_value>:

void MDIO_void_setport_value(port_type port , u8 copy_u8_value)
{
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	00 d0       	rcall	.+0      	; 0xc52 <MDIO_void_setport_value+0x6>
     c52:	00 d0       	rcall	.+0      	; 0xc54 <MDIO_void_setport_value+0x8>
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	89 83       	std	Y+1, r24	; 0x01
     c5a:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
     c5c:	89 81       	ldd	r24, Y+1	; 0x01
     c5e:	28 2f       	mov	r18, r24
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	3c 83       	std	Y+4, r19	; 0x04
     c64:	2b 83       	std	Y+3, r18	; 0x03
     c66:	8b 81       	ldd	r24, Y+3	; 0x03
     c68:	9c 81       	ldd	r25, Y+4	; 0x04
     c6a:	81 30       	cpi	r24, 0x01	; 1
     c6c:	91 05       	cpc	r25, r1
     c6e:	d1 f0       	breq	.+52     	; 0xca4 <MDIO_void_setport_value+0x58>
     c70:	2b 81       	ldd	r18, Y+3	; 0x03
     c72:	3c 81       	ldd	r19, Y+4	; 0x04
     c74:	22 30       	cpi	r18, 0x02	; 2
     c76:	31 05       	cpc	r19, r1
     c78:	2c f4       	brge	.+10     	; 0xc84 <MDIO_void_setport_value+0x38>
     c7a:	8b 81       	ldd	r24, Y+3	; 0x03
     c7c:	9c 81       	ldd	r25, Y+4	; 0x04
     c7e:	00 97       	sbiw	r24, 0x00	; 0
     c80:	61 f0       	breq	.+24     	; 0xc9a <MDIO_void_setport_value+0x4e>
     c82:	1e c0       	rjmp	.+60     	; 0xcc0 <MDIO_void_setport_value+0x74>
     c84:	2b 81       	ldd	r18, Y+3	; 0x03
     c86:	3c 81       	ldd	r19, Y+4	; 0x04
     c88:	22 30       	cpi	r18, 0x02	; 2
     c8a:	31 05       	cpc	r19, r1
     c8c:	81 f0       	breq	.+32     	; 0xcae <MDIO_void_setport_value+0x62>
     c8e:	8b 81       	ldd	r24, Y+3	; 0x03
     c90:	9c 81       	ldd	r25, Y+4	; 0x04
     c92:	83 30       	cpi	r24, 0x03	; 3
     c94:	91 05       	cpc	r25, r1
     c96:	81 f0       	breq	.+32     	; 0xcb8 <MDIO_void_setport_value+0x6c>
     c98:	13 c0       	rjmp	.+38     	; 0xcc0 <MDIO_void_setport_value+0x74>
	{
	 	case PORTA_ID: PORTA = copy_u8_value; break;
     c9a:	eb e3       	ldi	r30, 0x3B	; 59
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ca0:	80 83       	st	Z, r24
     ca2:	0e c0       	rjmp	.+28     	; 0xcc0 <MDIO_void_setport_value+0x74>
		case PORTB_ID: PORTB = copy_u8_value; break;
     ca4:	e8 e3       	ldi	r30, 0x38	; 56
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	8a 81       	ldd	r24, Y+2	; 0x02
     caa:	80 83       	st	Z, r24
     cac:	09 c0       	rjmp	.+18     	; 0xcc0 <MDIO_void_setport_value+0x74>
		case PORTC_ID: PORTC = copy_u8_value; break;
     cae:	e5 e3       	ldi	r30, 0x35	; 53
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	80 83       	st	Z, r24
     cb6:	04 c0       	rjmp	.+8      	; 0xcc0 <MDIO_void_setport_value+0x74>
		case PORTD_ID: PORTD = copy_u8_value; break;
     cb8:	e2 e3       	ldi	r30, 0x32	; 50
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	8a 81       	ldd	r24, Y+2	; 0x02
     cbe:	80 83       	st	Z, r24
	}
}
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	cf 91       	pop	r28
     cca:	df 91       	pop	r29
     ccc:	08 95       	ret

00000cce <MDIO_void_setport_direction>:

void MDIO_void_setport_direction(port_type port , direction_type direction)
{
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	00 d0       	rcall	.+0      	; 0xcd4 <MDIO_void_setport_direction+0x6>
     cd4:	00 d0       	rcall	.+0      	; 0xcd6 <MDIO_void_setport_direction+0x8>
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <MDIO_void_setport_direction+0xa>
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	89 83       	std	Y+1, r24	; 0x01
     cde:	6a 83       	std	Y+2, r22	; 0x02
	if(direction == OUTPUT)
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	81 30       	cpi	r24, 0x01	; 1
     ce4:	91 f5       	brne	.+100    	; 0xd4a <MDIO_void_setport_direction+0x7c>
	{
		switch(port)
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	28 2f       	mov	r18, r24
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	3e 83       	std	Y+6, r19	; 0x06
     cee:	2d 83       	std	Y+5, r18	; 0x05
     cf0:	8d 81       	ldd	r24, Y+5	; 0x05
     cf2:	9e 81       	ldd	r25, Y+6	; 0x06
     cf4:	81 30       	cpi	r24, 0x01	; 1
     cf6:	91 05       	cpc	r25, r1
     cf8:	d1 f0       	breq	.+52     	; 0xd2e <MDIO_void_setport_direction+0x60>
     cfa:	2d 81       	ldd	r18, Y+5	; 0x05
     cfc:	3e 81       	ldd	r19, Y+6	; 0x06
     cfe:	22 30       	cpi	r18, 0x02	; 2
     d00:	31 05       	cpc	r19, r1
     d02:	2c f4       	brge	.+10     	; 0xd0e <MDIO_void_setport_direction+0x40>
     d04:	8d 81       	ldd	r24, Y+5	; 0x05
     d06:	9e 81       	ldd	r25, Y+6	; 0x06
     d08:	00 97       	sbiw	r24, 0x00	; 0
     d0a:	61 f0       	breq	.+24     	; 0xd24 <MDIO_void_setport_direction+0x56>
     d0c:	1e c0       	rjmp	.+60     	; 0xd4a <MDIO_void_setport_direction+0x7c>
     d0e:	2d 81       	ldd	r18, Y+5	; 0x05
     d10:	3e 81       	ldd	r19, Y+6	; 0x06
     d12:	22 30       	cpi	r18, 0x02	; 2
     d14:	31 05       	cpc	r19, r1
     d16:	81 f0       	breq	.+32     	; 0xd38 <MDIO_void_setport_direction+0x6a>
     d18:	8d 81       	ldd	r24, Y+5	; 0x05
     d1a:	9e 81       	ldd	r25, Y+6	; 0x06
     d1c:	83 30       	cpi	r24, 0x03	; 3
     d1e:	91 05       	cpc	r25, r1
     d20:	81 f0       	breq	.+32     	; 0xd42 <MDIO_void_setport_direction+0x74>
     d22:	13 c0       	rjmp	.+38     	; 0xd4a <MDIO_void_setport_direction+0x7c>
		{
			case PORTA_ID: DDRA = 0XFF; break;
     d24:	ea e3       	ldi	r30, 0x3A	; 58
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	8f ef       	ldi	r24, 0xFF	; 255
     d2a:	80 83       	st	Z, r24
     d2c:	0e c0       	rjmp	.+28     	; 0xd4a <MDIO_void_setport_direction+0x7c>
			case PORTB_ID: DDRB = 0XFF; break;
     d2e:	e7 e3       	ldi	r30, 0x37	; 55
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	8f ef       	ldi	r24, 0xFF	; 255
     d34:	80 83       	st	Z, r24
     d36:	09 c0       	rjmp	.+18     	; 0xd4a <MDIO_void_setport_direction+0x7c>
			case PORTC_ID: DDRC = 0XFF; break;
     d38:	e4 e3       	ldi	r30, 0x34	; 52
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	8f ef       	ldi	r24, 0xFF	; 255
     d3e:	80 83       	st	Z, r24
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <MDIO_void_setport_direction+0x7c>
			case PORTD_ID: DDRD = 0XFF; break;
     d42:	e1 e3       	ldi	r30, 0x31	; 49
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	8f ef       	ldi	r24, 0xFF	; 255
     d48:	80 83       	st	Z, r24
		}
	}

	if(direction == INPUT)
     d4a:	8a 81       	ldd	r24, Y+2	; 0x02
     d4c:	88 23       	and	r24, r24
     d4e:	71 f5       	brne	.+92     	; 0xdac <MDIO_void_setport_direction+0xde>
	{
		switch(port)
     d50:	89 81       	ldd	r24, Y+1	; 0x01
     d52:	28 2f       	mov	r18, r24
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	3c 83       	std	Y+4, r19	; 0x04
     d58:	2b 83       	std	Y+3, r18	; 0x03
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	81 30       	cpi	r24, 0x01	; 1
     d60:	91 05       	cpc	r25, r1
     d62:	c9 f0       	breq	.+50     	; 0xd96 <MDIO_void_setport_direction+0xc8>
     d64:	2b 81       	ldd	r18, Y+3	; 0x03
     d66:	3c 81       	ldd	r19, Y+4	; 0x04
     d68:	22 30       	cpi	r18, 0x02	; 2
     d6a:	31 05       	cpc	r19, r1
     d6c:	2c f4       	brge	.+10     	; 0xd78 <MDIO_void_setport_direction+0xaa>
     d6e:	8b 81       	ldd	r24, Y+3	; 0x03
     d70:	9c 81       	ldd	r25, Y+4	; 0x04
     d72:	00 97       	sbiw	r24, 0x00	; 0
     d74:	61 f0       	breq	.+24     	; 0xd8e <MDIO_void_setport_direction+0xc0>
     d76:	1a c0       	rjmp	.+52     	; 0xdac <MDIO_void_setport_direction+0xde>
     d78:	2b 81       	ldd	r18, Y+3	; 0x03
     d7a:	3c 81       	ldd	r19, Y+4	; 0x04
     d7c:	22 30       	cpi	r18, 0x02	; 2
     d7e:	31 05       	cpc	r19, r1
     d80:	71 f0       	breq	.+28     	; 0xd9e <MDIO_void_setport_direction+0xd0>
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	9c 81       	ldd	r25, Y+4	; 0x04
     d86:	83 30       	cpi	r24, 0x03	; 3
     d88:	91 05       	cpc	r25, r1
     d8a:	69 f0       	breq	.+26     	; 0xda6 <MDIO_void_setport_direction+0xd8>
     d8c:	0f c0       	rjmp	.+30     	; 0xdac <MDIO_void_setport_direction+0xde>
		{
			case PORTA_ID: DDRA = 0X00; break;
     d8e:	ea e3       	ldi	r30, 0x3A	; 58
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	10 82       	st	Z, r1
     d94:	0b c0       	rjmp	.+22     	; 0xdac <MDIO_void_setport_direction+0xde>
			case PORTB_ID: DDRB = 0X00; break;
     d96:	e7 e3       	ldi	r30, 0x37	; 55
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	10 82       	st	Z, r1
     d9c:	07 c0       	rjmp	.+14     	; 0xdac <MDIO_void_setport_direction+0xde>
			case PORTC_ID: DDRC = 0X00; break;
     d9e:	e4 e3       	ldi	r30, 0x34	; 52
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	10 82       	st	Z, r1
     da4:	03 c0       	rjmp	.+6      	; 0xdac <MDIO_void_setport_direction+0xde>
			case PORTD_ID: DDRD = 0X00; break;
     da6:	e1 e3       	ldi	r30, 0x31	; 49
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	10 82       	st	Z, r1
		}
	}

}
     dac:	26 96       	adiw	r28, 0x06	; 6
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <HPUSH_BUTTON_void_init>:
#include"../../MCAL/MDIO/MDIO_interface.h"

#include"HPUSH_BUTTON_config.h"

void HPUSH_BUTTON_void_init(u8 buttonPort,u8 buttonPin)
{
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	00 d0       	rcall	.+0      	; 0xdc4 <HPUSH_BUTTON_void_init+0x6>
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
     dc8:	89 83       	std	Y+1, r24	; 0x01
     dca:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_void_setpin_direction(buttonPort , buttonPin , INPUT);
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	6a 81       	ldd	r22, Y+2	; 0x02
     dd0:	40 e0       	ldi	r20, 0x00	; 0
     dd2:	0e 94 ad 04 	call	0x95a	; 0x95a <MDIO_void_setpin_direction>

	//Activation for poll up resistor
	MDIO_void_setpin_value(buttonPort , buttonPin , HIGH);
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
     dd8:	6a 81       	ldd	r22, Y+2	; 0x02
     dda:	41 e0       	ldi	r20, 0x01	; 1
     ddc:	0e 94 30 03 	call	0x660	; 0x660 <MDIO_void_setpin_value>
}
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	08 95       	ret

00000dea <HPUSH_BUTTON_void_read>:
value_type HPUSH_BUTTON_void_read(u8 buttonPort,u8 buttonPin)
{
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	00 d0       	rcall	.+0      	; 0xdf0 <HPUSH_BUTTON_void_read+0x6>
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	89 83       	std	Y+1, r24	; 0x01
     df6:	6a 83       	std	Y+2, r22	; 0x02
	return MDIO_value_type_getpin_value(buttonPort , buttonPin);
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	6a 81       	ldd	r22, Y+2	; 0x02
     dfc:	0e 94 ad 05 	call	0xb5a	; 0xb5a <MDIO_value_type_getpin_value>
}
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	cf 91       	pop	r28
     e06:	df 91       	pop	r29
     e08:	08 95       	ret

00000e0a <HLED_void_enable>:
#include"../../MCAL/MDIO/MDIO_interface.h"

#include"HLED_config.h"

void HLED_void_enable()
{
     e0a:	df 93       	push	r29
     e0c:	cf 93       	push	r28
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
	//for vehicles
	MDIO_void_setpin_direction(LED_VECH_PORT , LED_VECH_R , OUTPUT);
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	41 e0       	ldi	r20, 0x01	; 1
     e18:	0e 94 ad 04 	call	0x95a	; 0x95a <MDIO_void_setpin_direction>
	MDIO_void_setpin_direction(LED_VECH_PORT , LED_VECH_G , OUTPUT);
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	62 e0       	ldi	r22, 0x02	; 2
     e20:	41 e0       	ldi	r20, 0x01	; 1
     e22:	0e 94 ad 04 	call	0x95a	; 0x95a <MDIO_void_setpin_direction>
	MDIO_void_setpin_direction(LED_VECH_PORT , LED_VECH_Y , OUTPUT);
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	61 e0       	ldi	r22, 0x01	; 1
     e2a:	41 e0       	ldi	r20, 0x01	; 1
     e2c:	0e 94 ad 04 	call	0x95a	; 0x95a <MDIO_void_setpin_direction>

	//for Pedestrian
	MDIO_void_setpin_direction(LED_PED_PORT , LED_PED_R , OUTPUT);
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	41 e0       	ldi	r20, 0x01	; 1
     e36:	0e 94 ad 04 	call	0x95a	; 0x95a <MDIO_void_setpin_direction>
	MDIO_void_setpin_direction(LED_PED_PORT , LED_PED_G , OUTPUT);
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	62 e0       	ldi	r22, 0x02	; 2
     e3e:	41 e0       	ldi	r20, 0x01	; 1
     e40:	0e 94 ad 04 	call	0x95a	; 0x95a <MDIO_void_setpin_direction>
	MDIO_void_setpin_direction(LED_PED_PORT , LED_PED_Y , OUTPUT);
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	61 e0       	ldi	r22, 0x01	; 1
     e48:	41 e0       	ldi	r20, 0x01	; 1
     e4a:	0e 94 ad 04 	call	0x95a	; 0x95a <MDIO_void_setpin_direction>
}
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <HLED_void_switch_on>:
void HLED_void_switch_on(u8 led_port , u8 led_pin)
{
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	00 d0       	rcall	.+0      	; 0xe5a <HLED_void_switch_on+0x6>
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	89 83       	std	Y+1, r24	; 0x01
     e60:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_void_setpin_value(led_port , led_pin , HIGH);
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	6a 81       	ldd	r22, Y+2	; 0x02
     e66:	41 e0       	ldi	r20, 0x01	; 1
     e68:	0e 94 30 03 	call	0x660	; 0x660 <MDIO_void_setpin_value>
}
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <HLED_void_switch_off>:
void HLED_void_switch_off(u8 led_port , u8 led_pin)
{
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <HLED_void_switch_off+0x6>
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	89 83       	std	Y+1, r24	; 0x01
     e82:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_void_setpin_value(led_port , led_pin , LOW);
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	6a 81       	ldd	r22, Y+2	; 0x02
     e88:	40 e0       	ldi	r20, 0x00	; 0
     e8a:	0e 94 30 03 	call	0x660	; 0x660 <MDIO_void_setpin_value>
}
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	08 95       	ret

00000e98 <HLED_void_toggle>:
void HLED_void_toggle(u8 led_port , u8 led_pin)
{
     e98:	df 93       	push	r29
     e9a:	cf 93       	push	r28
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <HLED_void_toggle+0x6>
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
     ea2:	89 83       	std	Y+1, r24	; 0x01
     ea4:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_void_toggle_pin(led_port , led_pin);
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	6a 81       	ldd	r22, Y+2	; 0x02
     eaa:	0e 94 30 04 	call	0x860	; 0x860 <MDIO_void_toggle_pin>
}
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	08 95       	ret

00000eb8 <pattern>:
u8 ped_mode = 0 , flag_to_begin = 0;
u8 Vech_stop_or_GetReadyTo_move = 0;
u8 Vech_move_or_GetReadyTo_stop = 0;

void pattern()//called by ISR
{
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
	ped_mode = 1;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	80 93 60 00 	sts	0x0060, r24
}
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	08 95       	ret

00000ecc <APP_void_init>:

void APP_void_init()
{
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
	HLED_void_enable(); // Set direction of pins connected to 2 traffic lights
     ed4:	0e 94 05 07 	call	0xe0a	; 0xe0a <HLED_void_enable>
	HPUSH_BUTTON_void_init(BUTTON1_PORT , BUTTON1_PIN); // Set direction of pin connected to push button
     ed8:	83 e0       	ldi	r24, 0x03	; 3
     eda:	62 e0       	ldi	r22, 0x02	; 2
     edc:	0e 94 df 06 	call	0xdbe	; 0xdbe <HPUSH_BUTTON_void_init>
	//=====================================================================================================
	/*Enable global interrupt*/
	MGIE_void_enable();
     ee0:	0e 94 5f 01 	call	0x2be	; 0x2be <MGIE_void_enable>
	//=====================================================================================================
	//for TIMER0
	//===========
	/*TIMER 0 INITIALIZATION*/
	MTIMER_TIMER0_void_Init();
     ee4:	0e 94 cc 00 	call	0x198	; 0x198 <MTIMER_TIMER0_void_Init>
	//=====================================================================================================
	//for external interrupt 0 (INT0)
	//===============================
	/*Configurations of external interrupt 0*/
	MEXTI_void_intialization(INT0 , FALLING_EDGE);
     ee8:	86 e0       	ldi	r24, 0x06	; 6
     eea:	62 e0       	ldi	r22, 0x02	; 2
     eec:	0e 94 b6 01 	call	0x36c	; 0x36c <MEXTI_void_intialization>

	MEXTI_void_setCallBack_INT0(pattern);
     ef0:	8c e5       	ldi	r24, 0x5C	; 92
     ef2:	97 e0       	ldi	r25, 0x07	; 7
     ef4:	0e 94 73 02 	call	0x4e6	; 0x4e6 <MEXTI_void_setCallBack_INT0>

	/*enable external interrupt 0 initially*/
	MEXTI_void_enable(INT0);
     ef8:	86 e0       	ldi	r24, 0x06	; 6
     efa:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <MEXTI_void_enable>
	//====================================================================
}
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <APP_void_start>:
void APP_void_start()
{
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	a0 97       	sbiw	r28, 0x20	; 32
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
	switch(ped_mode)
     f18:	80 91 60 00 	lds	r24, 0x0060
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	38 a3       	std	Y+32, r19	; 0x20
     f22:	2f 8f       	std	Y+31, r18	; 0x1f
     f24:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f26:	98 a1       	ldd	r25, Y+32	; 0x20
     f28:	00 97       	sbiw	r24, 0x00	; 0
     f2a:	39 f0       	breq	.+14     	; 0xf3a <APP_void_start+0x36>
     f2c:	2f 8d       	ldd	r18, Y+31	; 0x1f
     f2e:	38 a1       	ldd	r19, Y+32	; 0x20
     f30:	21 30       	cpi	r18, 0x01	; 1
     f32:	31 05       	cpc	r19, r1
     f34:	09 f4       	brne	.+2      	; 0xf38 <APP_void_start+0x34>
     f36:	e9 c0       	rjmp	.+466    	; 0x110a <APP_void_start+0x206>
     f38:	e2 c1       	rjmp	.+964    	; 0x12fe <APP_void_start+0x3fa>
	{
	case 0 :
		//========================================
		/*enable external interrupt 0*/
		//========================================
		MEXTI_void_enable(INT0);
     f3a:	86 e0       	ldi	r24, 0x06	; 6
     f3c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <MEXTI_void_enable>
		//========================================
		if(flag_to_begin == 1)
     f40:	80 91 61 00 	lds	r24, 0x0061
     f44:	81 30       	cpi	r24, 0x01	; 1
     f46:	19 f4       	brne	.+6      	; 0xf4e <APP_void_start+0x4a>
		{
			flag_to_begin = 0;
     f48:	10 92 61 00 	sts	0x0061, r1
     f4c:	24 c0       	rjmp	.+72     	; 0xf96 <APP_void_start+0x92>
			goto from_begin;
		}
		Vech_move_or_GetReadyTo_stop = 1;
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	80 93 63 00 	sts	0x0063, r24
		//car moving
		HLED_void_switch_off(LED_VECH_PORT , LED_VECH_R);
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	60 e0       	ldi	r22, 0x00	; 0
     f58:	0e 94 3b 07 	call	0xe76	; 0xe76 <HLED_void_switch_off>
		HLED_void_switch_on(LED_VECH_PORT , LED_VECH_G);
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	62 e0       	ldi	r22, 0x02	; 2
     f60:	0e 94 2a 07 	call	0xe54	; 0xe54 <HLED_void_switch_on>

		for(u16 i = 0 ; i < 16000 ; i++)
     f64:	1e 8e       	std	Y+30, r1	; 0x1e
     f66:	1d 8e       	std	Y+29, r1	; 0x1d
     f68:	0b c0       	rjmp	.+22     	; 0xf80 <APP_void_start+0x7c>
		{
			 MTIMER_void_delay();
     f6a:	0e 94 4d 01 	call	0x29a	; 0x29a <MTIMER_void_delay>
			 if(ped_mode == 1) break;
     f6e:	80 91 60 00 	lds	r24, 0x0060
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	59 f0       	breq	.+22     	; 0xf8c <APP_void_start+0x88>
		Vech_move_or_GetReadyTo_stop = 1;
		//car moving
		HLED_void_switch_off(LED_VECH_PORT , LED_VECH_R);
		HLED_void_switch_on(LED_VECH_PORT , LED_VECH_G);

		for(u16 i = 0 ; i < 16000 ; i++)
     f76:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f78:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f7a:	01 96       	adiw	r24, 0x01	; 1
     f7c:	9e 8f       	std	Y+30, r25	; 0x1e
     f7e:	8d 8f       	std	Y+29, r24	; 0x1d
     f80:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f82:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f84:	3e e3       	ldi	r19, 0x3E	; 62
     f86:	80 38       	cpi	r24, 0x80	; 128
     f88:	93 07       	cpc	r25, r19
     f8a:	78 f3       	brcs	.-34     	; 0xf6a <APP_void_start+0x66>
		{
			 MTIMER_void_delay();
			 if(ped_mode == 1) break;
		}
		if(ped_mode == 1) break;
     f8c:	80 91 60 00 	lds	r24, 0x0060
     f90:	81 30       	cpi	r24, 0x01	; 1
     f92:	09 f4       	brne	.+2      	; 0xf96 <APP_void_start+0x92>
     f94:	b4 c1       	rjmp	.+872    	; 0x12fe <APP_void_start+0x3fa>
	//============================================================================
		from_begin:
		Vech_move_or_GetReadyTo_stop = 1;
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	80 93 63 00 	sts	0x0063, r24
		//====================================================================
		//cars get ready to stop
		HLED_void_switch_off(LED_PED_PORT , LED_PED_R);
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	60 e0       	ldi	r22, 0x00	; 0
     fa0:	0e 94 3b 07 	call	0xe76	; 0xe76 <HLED_void_switch_off>
		for(u8 j = 0 ; j < 8 ; j++)
     fa4:	1c 8e       	std	Y+28, r1	; 0x1c
     fa6:	3b c0       	rjmp	.+118    	; 0x101e <APP_void_start+0x11a>
		{
			HLED_void_switch_on(LED_VECH_PORT , LED_VECH_Y);
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	61 e0       	ldi	r22, 0x01	; 1
     fac:	0e 94 2a 07 	call	0xe54	; 0xe54 <HLED_void_switch_on>
			for(u16 i = 0 ; i < 1000 ; i++)
     fb0:	1b 8e       	std	Y+27, r1	; 0x1b
     fb2:	1a 8e       	std	Y+26, r1	; 0x1a
     fb4:	0b c0       	rjmp	.+22     	; 0xfcc <APP_void_start+0xc8>
			{
				MTIMER_void_delay();
     fb6:	0e 94 4d 01 	call	0x29a	; 0x29a <MTIMER_void_delay>
				if(ped_mode == 1) break;
     fba:	80 91 60 00 	lds	r24, 0x0060
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	59 f0       	breq	.+22     	; 0xfd8 <APP_void_start+0xd4>
		//cars get ready to stop
		HLED_void_switch_off(LED_PED_PORT , LED_PED_R);
		for(u8 j = 0 ; j < 8 ; j++)
		{
			HLED_void_switch_on(LED_VECH_PORT , LED_VECH_Y);
			for(u16 i = 0 ; i < 1000 ; i++)
     fc2:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fc4:	9b 8d       	ldd	r25, Y+27	; 0x1b
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	9b 8f       	std	Y+27, r25	; 0x1b
     fca:	8a 8f       	std	Y+26, r24	; 0x1a
     fcc:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fce:	9b 8d       	ldd	r25, Y+27	; 0x1b
     fd0:	23 e0       	ldi	r18, 0x03	; 3
     fd2:	88 3e       	cpi	r24, 0xE8	; 232
     fd4:	92 07       	cpc	r25, r18
     fd6:	78 f3       	brcs	.-34     	; 0xfb6 <APP_void_start+0xb2>
			{
				MTIMER_void_delay();
				if(ped_mode == 1) break;
			}
			if(ped_mode == 1) break;
     fd8:	80 91 60 00 	lds	r24, 0x0060
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	11 f1       	breq	.+68     	; 0x1024 <APP_void_start+0x120>

			HLED_void_switch_off(LED_VECH_PORT , LED_VECH_Y);
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	61 e0       	ldi	r22, 0x01	; 1
     fe4:	0e 94 3b 07 	call	0xe76	; 0xe76 <HLED_void_switch_off>
			for(u16 i = 0 ; i < 1000 ; i++)
     fe8:	19 8e       	std	Y+25, r1	; 0x19
     fea:	18 8e       	std	Y+24, r1	; 0x18
     fec:	0b c0       	rjmp	.+22     	; 0x1004 <APP_void_start+0x100>
			{
				MTIMER_void_delay();
     fee:	0e 94 4d 01 	call	0x29a	; 0x29a <MTIMER_void_delay>
				if(ped_mode == 1) break;
     ff2:	80 91 60 00 	lds	r24, 0x0060
     ff6:	81 30       	cpi	r24, 0x01	; 1
     ff8:	59 f0       	breq	.+22     	; 0x1010 <APP_void_start+0x10c>
				if(ped_mode == 1) break;
			}
			if(ped_mode == 1) break;

			HLED_void_switch_off(LED_VECH_PORT , LED_VECH_Y);
			for(u16 i = 0 ; i < 1000 ; i++)
     ffa:	88 8d       	ldd	r24, Y+24	; 0x18
     ffc:	99 8d       	ldd	r25, Y+25	; 0x19
     ffe:	01 96       	adiw	r24, 0x01	; 1
    1000:	99 8f       	std	Y+25, r25	; 0x19
    1002:	88 8f       	std	Y+24, r24	; 0x18
    1004:	88 8d       	ldd	r24, Y+24	; 0x18
    1006:	99 8d       	ldd	r25, Y+25	; 0x19
    1008:	33 e0       	ldi	r19, 0x03	; 3
    100a:	88 3e       	cpi	r24, 0xE8	; 232
    100c:	93 07       	cpc	r25, r19
    100e:	78 f3       	brcs	.-34     	; 0xfee <APP_void_start+0xea>
			{
				MTIMER_void_delay();
				if(ped_mode == 1) break;
			}
			if(ped_mode == 1) break;
    1010:	80 91 60 00 	lds	r24, 0x0060
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	31 f0       	breq	.+12     	; 0x1024 <APP_void_start+0x120>
		from_begin:
		Vech_move_or_GetReadyTo_stop = 1;
		//====================================================================
		//cars get ready to stop
		HLED_void_switch_off(LED_PED_PORT , LED_PED_R);
		for(u8 j = 0 ; j < 8 ; j++)
    1018:	8c 8d       	ldd	r24, Y+28	; 0x1c
    101a:	8f 5f       	subi	r24, 0xFF	; 255
    101c:	8c 8f       	std	Y+28, r24	; 0x1c
    101e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1020:	88 30       	cpi	r24, 0x08	; 8
    1022:	10 f2       	brcs	.-124    	; 0xfa8 <APP_void_start+0xa4>
				MTIMER_void_delay();
				if(ped_mode == 1) break;
			}
			if(ped_mode == 1) break;
		}
		if(ped_mode == 1) break;
    1024:	80 91 60 00 	lds	r24, 0x0060
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	09 f4       	brne	.+2      	; 0x102e <APP_void_start+0x12a>
    102c:	68 c1       	rjmp	.+720    	; 0x12fe <APP_void_start+0x3fa>
		Vech_move_or_GetReadyTo_stop = 0;
    102e:	10 92 63 00 	sts	0x0063, r1
	//==============================================================================================================================
		Vech_stop_or_GetReadyTo_move = 1;
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	80 93 62 00 	sts	0x0062, r24
		// cars stop
		HLED_void_switch_off(LED_VECH_PORT , LED_VECH_G);
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	62 e0       	ldi	r22, 0x02	; 2
    103c:	0e 94 3b 07 	call	0xe76	; 0xe76 <HLED_void_switch_off>
		HLED_void_switch_on(LED_VECH_PORT , LED_VECH_R);
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	0e 94 2a 07 	call	0xe54	; 0xe54 <HLED_void_switch_on>
		for(u16 i = 0 ; i < 16000 ; i++)
    1048:	1f 8a       	std	Y+23, r1	; 0x17
    104a:	1e 8a       	std	Y+22, r1	; 0x16
    104c:	0b c0       	rjmp	.+22     	; 0x1064 <APP_void_start+0x160>
		{
			MTIMER_void_delay();
    104e:	0e 94 4d 01 	call	0x29a	; 0x29a <MTIMER_void_delay>
			if(ped_mode == 1) break;
    1052:	80 91 60 00 	lds	r24, 0x0060
    1056:	81 30       	cpi	r24, 0x01	; 1
    1058:	59 f0       	breq	.+22     	; 0x1070 <APP_void_start+0x16c>
	//==============================================================================================================================
		Vech_stop_or_GetReadyTo_move = 1;
		// cars stop
		HLED_void_switch_off(LED_VECH_PORT , LED_VECH_G);
		HLED_void_switch_on(LED_VECH_PORT , LED_VECH_R);
		for(u16 i = 0 ; i < 16000 ; i++)
    105a:	8e 89       	ldd	r24, Y+22	; 0x16
    105c:	9f 89       	ldd	r25, Y+23	; 0x17
    105e:	01 96       	adiw	r24, 0x01	; 1
    1060:	9f 8b       	std	Y+23, r25	; 0x17
    1062:	8e 8b       	std	Y+22, r24	; 0x16
    1064:	8e 89       	ldd	r24, Y+22	; 0x16
    1066:	9f 89       	ldd	r25, Y+23	; 0x17
    1068:	2e e3       	ldi	r18, 0x3E	; 62
    106a:	80 38       	cpi	r24, 0x80	; 128
    106c:	92 07       	cpc	r25, r18
    106e:	78 f3       	brcs	.-34     	; 0x104e <APP_void_start+0x14a>
		{
			MTIMER_void_delay();
			if(ped_mode == 1) break;
		}
		if(ped_mode == 1) break;
    1070:	80 91 60 00 	lds	r24, 0x0060
    1074:	81 30       	cpi	r24, 0x01	; 1
    1076:	09 f4       	brne	.+2      	; 0x107a <APP_void_start+0x176>
    1078:	42 c1       	rjmp	.+644    	; 0x12fe <APP_void_start+0x3fa>
	//===========================================================================
		//cars get ready to move
		for(u8 j = 0 ; j < 8 ; j++)
    107a:	1d 8a       	std	Y+21, r1	; 0x15
    107c:	3b c0       	rjmp	.+118    	; 0x10f4 <APP_void_start+0x1f0>
		{
			HLED_void_switch_on(LED_VECH_PORT , LED_VECH_Y);
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	61 e0       	ldi	r22, 0x01	; 1
    1082:	0e 94 2a 07 	call	0xe54	; 0xe54 <HLED_void_switch_on>

			for(u16 i = 0 ; i < 1000 ; i++)
    1086:	1c 8a       	std	Y+20, r1	; 0x14
    1088:	1b 8a       	std	Y+19, r1	; 0x13
    108a:	0b c0       	rjmp	.+22     	; 0x10a2 <APP_void_start+0x19e>
			{
				MTIMER_void_delay();
    108c:	0e 94 4d 01 	call	0x29a	; 0x29a <MTIMER_void_delay>
				if(ped_mode == 1) break;
    1090:	80 91 60 00 	lds	r24, 0x0060
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	59 f0       	breq	.+22     	; 0x10ae <APP_void_start+0x1aa>
		//cars get ready to move
		for(u8 j = 0 ; j < 8 ; j++)
		{
			HLED_void_switch_on(LED_VECH_PORT , LED_VECH_Y);

			for(u16 i = 0 ; i < 1000 ; i++)
    1098:	8b 89       	ldd	r24, Y+19	; 0x13
    109a:	9c 89       	ldd	r25, Y+20	; 0x14
    109c:	01 96       	adiw	r24, 0x01	; 1
    109e:	9c 8b       	std	Y+20, r25	; 0x14
    10a0:	8b 8b       	std	Y+19, r24	; 0x13
    10a2:	8b 89       	ldd	r24, Y+19	; 0x13
    10a4:	9c 89       	ldd	r25, Y+20	; 0x14
    10a6:	33 e0       	ldi	r19, 0x03	; 3
    10a8:	88 3e       	cpi	r24, 0xE8	; 232
    10aa:	93 07       	cpc	r25, r19
    10ac:	78 f3       	brcs	.-34     	; 0x108c <APP_void_start+0x188>
			{
				MTIMER_void_delay();
				if(ped_mode == 1) break;
			}
			if(ped_mode == 1) break;
    10ae:	80 91 60 00 	lds	r24, 0x0060
    10b2:	81 30       	cpi	r24, 0x01	; 1
    10b4:	11 f1       	breq	.+68     	; 0x10fa <APP_void_start+0x1f6>

			HLED_void_switch_off(LED_VECH_PORT , LED_VECH_Y);
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	61 e0       	ldi	r22, 0x01	; 1
    10ba:	0e 94 3b 07 	call	0xe76	; 0xe76 <HLED_void_switch_off>
			for(u16 i = 0 ; i < 1000 ; i++)
    10be:	1a 8a       	std	Y+18, r1	; 0x12
    10c0:	19 8a       	std	Y+17, r1	; 0x11
    10c2:	0b c0       	rjmp	.+22     	; 0x10da <APP_void_start+0x1d6>
			{
				MTIMER_void_delay();
    10c4:	0e 94 4d 01 	call	0x29a	; 0x29a <MTIMER_void_delay>
				if(ped_mode == 1) break;
    10c8:	80 91 60 00 	lds	r24, 0x0060
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	59 f0       	breq	.+22     	; 0x10e6 <APP_void_start+0x1e2>
				if(ped_mode == 1) break;
			}
			if(ped_mode == 1) break;

			HLED_void_switch_off(LED_VECH_PORT , LED_VECH_Y);
			for(u16 i = 0 ; i < 1000 ; i++)
    10d0:	89 89       	ldd	r24, Y+17	; 0x11
    10d2:	9a 89       	ldd	r25, Y+18	; 0x12
    10d4:	01 96       	adiw	r24, 0x01	; 1
    10d6:	9a 8b       	std	Y+18, r25	; 0x12
    10d8:	89 8b       	std	Y+17, r24	; 0x11
    10da:	89 89       	ldd	r24, Y+17	; 0x11
    10dc:	9a 89       	ldd	r25, Y+18	; 0x12
    10de:	23 e0       	ldi	r18, 0x03	; 3
    10e0:	88 3e       	cpi	r24, 0xE8	; 232
    10e2:	92 07       	cpc	r25, r18
    10e4:	78 f3       	brcs	.-34     	; 0x10c4 <APP_void_start+0x1c0>
			{
				MTIMER_void_delay();
				if(ped_mode == 1) break;
			}
			if(ped_mode == 1) break;
    10e6:	80 91 60 00 	lds	r24, 0x0060
    10ea:	81 30       	cpi	r24, 0x01	; 1
    10ec:	31 f0       	breq	.+12     	; 0x10fa <APP_void_start+0x1f6>
			if(ped_mode == 1) break;
		}
		if(ped_mode == 1) break;
	//===========================================================================
		//cars get ready to move
		for(u8 j = 0 ; j < 8 ; j++)
    10ee:	8d 89       	ldd	r24, Y+21	; 0x15
    10f0:	8f 5f       	subi	r24, 0xFF	; 255
    10f2:	8d 8b       	std	Y+21, r24	; 0x15
    10f4:	8d 89       	ldd	r24, Y+21	; 0x15
    10f6:	88 30       	cpi	r24, 0x08	; 8
    10f8:	10 f2       	brcs	.-124    	; 0x107e <APP_void_start+0x17a>
				MTIMER_void_delay();
				if(ped_mode == 1) break;
			}
			if(ped_mode == 1) break;
		}
		if(ped_mode == 1) break;
    10fa:	80 91 60 00 	lds	r24, 0x0060
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	09 f4       	brne	.+2      	; 0x1104 <APP_void_start+0x200>
    1102:	fd c0       	rjmp	.+506    	; 0x12fe <APP_void_start+0x3fa>
		Vech_stop_or_GetReadyTo_move = 0;
    1104:	10 92 62 00 	sts	0x0062, r1
    1108:	fa c0       	rjmp	.+500    	; 0x12fe <APP_void_start+0x3fa>
		break;
	case 1:
		//========================================
		/*Disable external interrupt 0*/
		//========================================
		MEXTI_void_disable(INT0);
    110a:	86 e0       	ldi	r24, 0x06	; 6
    110c:	0e 94 98 01 	call	0x330	; 0x330 <MEXTI_void_disable>
		//========================================
		if(Vech_stop_or_GetReadyTo_move == 1)
    1110:	80 91 62 00 	lds	r24, 0x0062
    1114:	81 30       	cpi	r24, 0x01	; 1
    1116:	09 f5       	brne	.+66     	; 0x115a <APP_void_start+0x256>
		{
			Vech_stop_or_GetReadyTo_move = 0;
    1118:	10 92 62 00 	sts	0x0062, r1
			Vech_move_or_GetReadyTo_stop = 0;
    111c:	10 92 63 00 	sts	0x0063, r1

			//cars stop and Pedestrian moving
			HLED_void_switch_off(LED_VECH_PORT , LED_VECH_Y);
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	61 e0       	ldi	r22, 0x01	; 1
    1124:	0e 94 3b 07 	call	0xe76	; 0xe76 <HLED_void_switch_off>

			HLED_void_switch_on(LED_PED_PORT , LED_PED_G);
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	62 e0       	ldi	r22, 0x02	; 2
    112c:	0e 94 2a 07 	call	0xe54	; 0xe54 <HLED_void_switch_on>
			HLED_void_switch_on(LED_VECH_PORT , LED_VECH_R);
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	60 e0       	ldi	r22, 0x00	; 0
    1134:	0e 94 2a 07 	call	0xe54	; 0xe54 <HLED_void_switch_on>

			for(u16 i = 0 ; i < 16000 ; i++)
    1138:	18 8a       	std	Y+16, r1	; 0x10
    113a:	1f 86       	std	Y+15, r1	; 0x0f
    113c:	07 c0       	rjmp	.+14     	; 0x114c <APP_void_start+0x248>
			{
				MTIMER_void_delay();
    113e:	0e 94 4d 01 	call	0x29a	; 0x29a <MTIMER_void_delay>
			HLED_void_switch_off(LED_VECH_PORT , LED_VECH_Y);

			HLED_void_switch_on(LED_PED_PORT , LED_PED_G);
			HLED_void_switch_on(LED_VECH_PORT , LED_VECH_R);

			for(u16 i = 0 ; i < 16000 ; i++)
    1142:	8f 85       	ldd	r24, Y+15	; 0x0f
    1144:	98 89       	ldd	r25, Y+16	; 0x10
    1146:	01 96       	adiw	r24, 0x01	; 1
    1148:	98 8b       	std	Y+16, r25	; 0x10
    114a:	8f 87       	std	Y+15, r24	; 0x0f
    114c:	8f 85       	ldd	r24, Y+15	; 0x0f
    114e:	98 89       	ldd	r25, Y+16	; 0x10
    1150:	3e e3       	ldi	r19, 0x3E	; 62
    1152:	80 38       	cpi	r24, 0x80	; 128
    1154:	93 07       	cpc	r25, r19
    1156:	98 f3       	brcs	.-26     	; 0x113e <APP_void_start+0x23a>
    1158:	6d c0       	rjmp	.+218    	; 0x1234 <APP_void_start+0x330>
			{
				MTIMER_void_delay();
			}

		}
		else if(Vech_move_or_GetReadyTo_stop == 1)
    115a:	80 91 63 00 	lds	r24, 0x0063
    115e:	81 30       	cpi	r24, 0x01	; 1
    1160:	09 f0       	breq	.+2      	; 0x1164 <APP_void_start+0x260>
    1162:	68 c0       	rjmp	.+208    	; 0x1234 <APP_void_start+0x330>
		{
			Vech_stop_or_GetReadyTo_move = 0;
    1164:	10 92 62 00 	sts	0x0062, r1
			Vech_move_or_GetReadyTo_stop = 0;
    1168:	10 92 63 00 	sts	0x0063, r1

			//cars get ready to stop and Pedestrian get ready to move
			HLED_void_switch_off(LED_VECH_PORT , LED_VECH_Y);
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	61 e0       	ldi	r22, 0x01	; 1
    1170:	0e 94 3b 07 	call	0xe76	; 0xe76 <HLED_void_switch_off>

			HLED_void_switch_on(LED_PED_PORT , LED_PED_R);
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	60 e0       	ldi	r22, 0x00	; 0
    1178:	0e 94 2a 07 	call	0xe54	; 0xe54 <HLED_void_switch_on>
			HLED_void_switch_on(LED_VECH_PORT , LED_VECH_G);
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	62 e0       	ldi	r22, 0x02	; 2
    1180:	0e 94 2a 07 	call	0xe54	; 0xe54 <HLED_void_switch_on>
			for(u8 j = 0 ; j < 8 ; j++)
    1184:	1e 86       	std	Y+14, r1	; 0x0e
    1186:	33 c0       	rjmp	.+102    	; 0x11ee <APP_void_start+0x2ea>
			{
				HLED_void_switch_on(LED_VECH_PORT , LED_VECH_Y);
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	61 e0       	ldi	r22, 0x01	; 1
    118c:	0e 94 2a 07 	call	0xe54	; 0xe54 <HLED_void_switch_on>
				HLED_void_switch_on(LED_PED_PORT , LED_PED_Y);
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	61 e0       	ldi	r22, 0x01	; 1
    1194:	0e 94 2a 07 	call	0xe54	; 0xe54 <HLED_void_switch_on>
				for(u16 i = 0 ; i < 1000 ; i++)
    1198:	1d 86       	std	Y+13, r1	; 0x0d
    119a:	1c 86       	std	Y+12, r1	; 0x0c
    119c:	07 c0       	rjmp	.+14     	; 0x11ac <APP_void_start+0x2a8>
				{
					MTIMER_void_delay();
    119e:	0e 94 4d 01 	call	0x29a	; 0x29a <MTIMER_void_delay>
			HLED_void_switch_on(LED_VECH_PORT , LED_VECH_G);
			for(u8 j = 0 ; j < 8 ; j++)
			{
				HLED_void_switch_on(LED_VECH_PORT , LED_VECH_Y);
				HLED_void_switch_on(LED_PED_PORT , LED_PED_Y);
				for(u16 i = 0 ; i < 1000 ; i++)
    11a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    11a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    11a6:	01 96       	adiw	r24, 0x01	; 1
    11a8:	9d 87       	std	Y+13, r25	; 0x0d
    11aa:	8c 87       	std	Y+12, r24	; 0x0c
    11ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    11ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    11b0:	23 e0       	ldi	r18, 0x03	; 3
    11b2:	88 3e       	cpi	r24, 0xE8	; 232
    11b4:	92 07       	cpc	r25, r18
    11b6:	98 f3       	brcs	.-26     	; 0x119e <APP_void_start+0x29a>
				{
					MTIMER_void_delay();
				}

				HLED_void_switch_off(LED_VECH_PORT , LED_VECH_Y);
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	61 e0       	ldi	r22, 0x01	; 1
    11bc:	0e 94 3b 07 	call	0xe76	; 0xe76 <HLED_void_switch_off>
				HLED_void_switch_off(LED_PED_PORT , LED_PED_Y);
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	61 e0       	ldi	r22, 0x01	; 1
    11c4:	0e 94 3b 07 	call	0xe76	; 0xe76 <HLED_void_switch_off>
				for(u16 i = 0 ; i < 1000 ; i++)
    11c8:	1b 86       	std	Y+11, r1	; 0x0b
    11ca:	1a 86       	std	Y+10, r1	; 0x0a
    11cc:	07 c0       	rjmp	.+14     	; 0x11dc <APP_void_start+0x2d8>
				{
					MTIMER_void_delay();
    11ce:	0e 94 4d 01 	call	0x29a	; 0x29a <MTIMER_void_delay>
					MTIMER_void_delay();
				}

				HLED_void_switch_off(LED_VECH_PORT , LED_VECH_Y);
				HLED_void_switch_off(LED_PED_PORT , LED_PED_Y);
				for(u16 i = 0 ; i < 1000 ; i++)
    11d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    11d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	9b 87       	std	Y+11, r25	; 0x0b
    11da:	8a 87       	std	Y+10, r24	; 0x0a
    11dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    11de:	9b 85       	ldd	r25, Y+11	; 0x0b
    11e0:	33 e0       	ldi	r19, 0x03	; 3
    11e2:	88 3e       	cpi	r24, 0xE8	; 232
    11e4:	93 07       	cpc	r25, r19
    11e6:	98 f3       	brcs	.-26     	; 0x11ce <APP_void_start+0x2ca>
			//cars get ready to stop and Pedestrian get ready to move
			HLED_void_switch_off(LED_VECH_PORT , LED_VECH_Y);

			HLED_void_switch_on(LED_PED_PORT , LED_PED_R);
			HLED_void_switch_on(LED_VECH_PORT , LED_VECH_G);
			for(u8 j = 0 ; j < 8 ; j++)
    11e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    11ea:	8f 5f       	subi	r24, 0xFF	; 255
    11ec:	8e 87       	std	Y+14, r24	; 0x0e
    11ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    11f0:	88 30       	cpi	r24, 0x08	; 8
    11f2:	50 f2       	brcs	.-108    	; 0x1188 <APP_void_start+0x284>
					MTIMER_void_delay();
				}
			}

			//cars stops and Pedestrian moves
			HLED_void_switch_off(LED_PED_PORT , LED_PED_R);
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	60 e0       	ldi	r22, 0x00	; 0
    11f8:	0e 94 3b 07 	call	0xe76	; 0xe76 <HLED_void_switch_off>
			HLED_void_switch_off(LED_VECH_PORT , LED_VECH_G);
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	62 e0       	ldi	r22, 0x02	; 2
    1200:	0e 94 3b 07 	call	0xe76	; 0xe76 <HLED_void_switch_off>

			HLED_void_switch_on(LED_PED_PORT , LED_PED_G);
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	62 e0       	ldi	r22, 0x02	; 2
    1208:	0e 94 2a 07 	call	0xe54	; 0xe54 <HLED_void_switch_on>
			HLED_void_switch_on(LED_VECH_PORT , LED_VECH_R);
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	60 e0       	ldi	r22, 0x00	; 0
    1210:	0e 94 2a 07 	call	0xe54	; 0xe54 <HLED_void_switch_on>
			for(u16 i = 0 ; i < 16000 ; i++)
    1214:	19 86       	std	Y+9, r1	; 0x09
    1216:	18 86       	std	Y+8, r1	; 0x08
    1218:	07 c0       	rjmp	.+14     	; 0x1228 <APP_void_start+0x324>
			{
				MTIMER_void_delay();
    121a:	0e 94 4d 01 	call	0x29a	; 0x29a <MTIMER_void_delay>
			HLED_void_switch_off(LED_PED_PORT , LED_PED_R);
			HLED_void_switch_off(LED_VECH_PORT , LED_VECH_G);

			HLED_void_switch_on(LED_PED_PORT , LED_PED_G);
			HLED_void_switch_on(LED_VECH_PORT , LED_VECH_R);
			for(u16 i = 0 ; i < 16000 ; i++)
    121e:	88 85       	ldd	r24, Y+8	; 0x08
    1220:	99 85       	ldd	r25, Y+9	; 0x09
    1222:	01 96       	adiw	r24, 0x01	; 1
    1224:	99 87       	std	Y+9, r25	; 0x09
    1226:	88 87       	std	Y+8, r24	; 0x08
    1228:	88 85       	ldd	r24, Y+8	; 0x08
    122a:	99 85       	ldd	r25, Y+9	; 0x09
    122c:	2e e3       	ldi	r18, 0x3E	; 62
    122e:	80 38       	cpi	r24, 0x80	; 128
    1230:	92 07       	cpc	r25, r18
    1232:	98 f3       	brcs	.-26     	; 0x121a <APP_void_start+0x316>
				MTIMER_void_delay();
			}
		}

		//cars get ready to move and Pedestrian get ready to stop
		HLED_void_switch_on(LED_VECH_PORT , LED_VECH_R);
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	0e 94 2a 07 	call	0xe54	; 0xe54 <HLED_void_switch_on>
		HLED_void_switch_on(LED_PED_PORT , LED_PED_G);
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	62 e0       	ldi	r22, 0x02	; 2
    1240:	0e 94 2a 07 	call	0xe54	; 0xe54 <HLED_void_switch_on>
		for(u8 j = 0 ; j < 8 ; j++)
    1244:	1f 82       	std	Y+7, r1	; 0x07
    1246:	33 c0       	rjmp	.+102    	; 0x12ae <APP_void_start+0x3aa>
		{
			HLED_void_switch_on(LED_VECH_PORT , LED_VECH_Y);
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	61 e0       	ldi	r22, 0x01	; 1
    124c:	0e 94 2a 07 	call	0xe54	; 0xe54 <HLED_void_switch_on>
			HLED_void_switch_on(LED_PED_PORT , LED_PED_Y);
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	61 e0       	ldi	r22, 0x01	; 1
    1254:	0e 94 2a 07 	call	0xe54	; 0xe54 <HLED_void_switch_on>
			for(u16 i = 0 ; i < 1000 ; i++)
    1258:	1e 82       	std	Y+6, r1	; 0x06
    125a:	1d 82       	std	Y+5, r1	; 0x05
    125c:	07 c0       	rjmp	.+14     	; 0x126c <APP_void_start+0x368>
			{
				MTIMER_void_delay();
    125e:	0e 94 4d 01 	call	0x29a	; 0x29a <MTIMER_void_delay>
		HLED_void_switch_on(LED_PED_PORT , LED_PED_G);
		for(u8 j = 0 ; j < 8 ; j++)
		{
			HLED_void_switch_on(LED_VECH_PORT , LED_VECH_Y);
			HLED_void_switch_on(LED_PED_PORT , LED_PED_Y);
			for(u16 i = 0 ; i < 1000 ; i++)
    1262:	8d 81       	ldd	r24, Y+5	; 0x05
    1264:	9e 81       	ldd	r25, Y+6	; 0x06
    1266:	01 96       	adiw	r24, 0x01	; 1
    1268:	9e 83       	std	Y+6, r25	; 0x06
    126a:	8d 83       	std	Y+5, r24	; 0x05
    126c:	8d 81       	ldd	r24, Y+5	; 0x05
    126e:	9e 81       	ldd	r25, Y+6	; 0x06
    1270:	33 e0       	ldi	r19, 0x03	; 3
    1272:	88 3e       	cpi	r24, 0xE8	; 232
    1274:	93 07       	cpc	r25, r19
    1276:	98 f3       	brcs	.-26     	; 0x125e <APP_void_start+0x35a>
			{
				MTIMER_void_delay();
			}

			HLED_void_switch_off(LED_VECH_PORT , LED_VECH_Y);
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	61 e0       	ldi	r22, 0x01	; 1
    127c:	0e 94 3b 07 	call	0xe76	; 0xe76 <HLED_void_switch_off>
			HLED_void_switch_off(LED_PED_PORT , LED_PED_Y);
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	61 e0       	ldi	r22, 0x01	; 1
    1284:	0e 94 3b 07 	call	0xe76	; 0xe76 <HLED_void_switch_off>
			for(u16 i = 0 ; i < 1000 ; i++)
    1288:	1c 82       	std	Y+4, r1	; 0x04
    128a:	1b 82       	std	Y+3, r1	; 0x03
    128c:	07 c0       	rjmp	.+14     	; 0x129c <APP_void_start+0x398>
			{
				MTIMER_void_delay();
    128e:	0e 94 4d 01 	call	0x29a	; 0x29a <MTIMER_void_delay>
				MTIMER_void_delay();
			}

			HLED_void_switch_off(LED_VECH_PORT , LED_VECH_Y);
			HLED_void_switch_off(LED_PED_PORT , LED_PED_Y);
			for(u16 i = 0 ; i < 1000 ; i++)
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	9c 81       	ldd	r25, Y+4	; 0x04
    1296:	01 96       	adiw	r24, 0x01	; 1
    1298:	9c 83       	std	Y+4, r25	; 0x04
    129a:	8b 83       	std	Y+3, r24	; 0x03
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	9c 81       	ldd	r25, Y+4	; 0x04
    12a0:	23 e0       	ldi	r18, 0x03	; 3
    12a2:	88 3e       	cpi	r24, 0xE8	; 232
    12a4:	92 07       	cpc	r25, r18
    12a6:	98 f3       	brcs	.-26     	; 0x128e <APP_void_start+0x38a>
		}

		//cars get ready to move and Pedestrian get ready to stop
		HLED_void_switch_on(LED_VECH_PORT , LED_VECH_R);
		HLED_void_switch_on(LED_PED_PORT , LED_PED_G);
		for(u8 j = 0 ; j < 8 ; j++)
    12a8:	8f 81       	ldd	r24, Y+7	; 0x07
    12aa:	8f 5f       	subi	r24, 0xFF	; 255
    12ac:	8f 83       	std	Y+7, r24	; 0x07
    12ae:	8f 81       	ldd	r24, Y+7	; 0x07
    12b0:	88 30       	cpi	r24, 0x08	; 8
    12b2:	50 f2       	brcs	.-108    	; 0x1248 <APP_void_start+0x344>
			{
				MTIMER_void_delay();
			}
		}
		//cars moves and Pedestrian stops
		HLED_void_switch_off(LED_VECH_PORT , LED_VECH_R);
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	0e 94 3b 07 	call	0xe76	; 0xe76 <HLED_void_switch_off>
		HLED_void_switch_off(LED_PED_PORT , LED_PED_G);
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	62 e0       	ldi	r22, 0x02	; 2
    12c0:	0e 94 3b 07 	call	0xe76	; 0xe76 <HLED_void_switch_off>

		HLED_void_switch_on(LED_PED_PORT , LED_PED_R);
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	0e 94 2a 07 	call	0xe54	; 0xe54 <HLED_void_switch_on>
		HLED_void_switch_on(LED_VECH_PORT , LED_VECH_G);
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	62 e0       	ldi	r22, 0x02	; 2
    12d0:	0e 94 2a 07 	call	0xe54	; 0xe54 <HLED_void_switch_on>
		for(u16 i = 0 ; i < 16000 ; i++)
    12d4:	1a 82       	std	Y+2, r1	; 0x02
    12d6:	19 82       	std	Y+1, r1	; 0x01
    12d8:	07 c0       	rjmp	.+14     	; 0x12e8 <APP_void_start+0x3e4>
		{
			MTIMER_void_delay();
    12da:	0e 94 4d 01 	call	0x29a	; 0x29a <MTIMER_void_delay>
		HLED_void_switch_off(LED_VECH_PORT , LED_VECH_R);
		HLED_void_switch_off(LED_PED_PORT , LED_PED_G);

		HLED_void_switch_on(LED_PED_PORT , LED_PED_R);
		HLED_void_switch_on(LED_VECH_PORT , LED_VECH_G);
		for(u16 i = 0 ; i < 16000 ; i++)
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	9a 81       	ldd	r25, Y+2	; 0x02
    12e2:	01 96       	adiw	r24, 0x01	; 1
    12e4:	9a 83       	std	Y+2, r25	; 0x02
    12e6:	89 83       	std	Y+1, r24	; 0x01
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	9a 81       	ldd	r25, Y+2	; 0x02
    12ec:	3e e3       	ldi	r19, 0x3E	; 62
    12ee:	80 38       	cpi	r24, 0x80	; 128
    12f0:	93 07       	cpc	r25, r19
    12f2:	98 f3       	brcs	.-26     	; 0x12da <APP_void_start+0x3d6>
		{
			MTIMER_void_delay();
		}
		ped_mode = 0;
    12f4:	10 92 60 00 	sts	0x0060, r1
		flag_to_begin = 1;
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	80 93 61 00 	sts	0x0061, r24
		break;

	}
}
    12fe:	a0 96       	adiw	r28, 0x20	; 32
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <main>:
#include"APP_interface.h"



void main()
{
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
	APP_void_init();
    1318:	0e 94 66 07 	call	0xecc	; 0xecc <APP_void_init>

	while(1)
	{
		APP_void_start();
    131c:	0e 94 82 07 	call	0xf04	; 0xf04 <APP_void_start>
    1320:	fd cf       	rjmp	.-6      	; 0x131c <main+0xc>

00001322 <_exit>:
    1322:	f8 94       	cli

00001324 <__stop_program>:
    1324:	ff cf       	rjmp	.-2      	; 0x1324 <__stop_program>
